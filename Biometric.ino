/******************************************* Biometric Icons *****************************************/

#define wifi_start_width 164
#define wifi_start_height 155
const uint8_t PROGMEM wifi_start_bits[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 
  0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x0f, 
  0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 
  0xfc, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xf0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x7f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xe0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 
  0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xf0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x0f, 0xff, 
  0xff, 0xc0, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xf8, 
  0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xfe, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x0f, 
  0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfc, 0x00, 0x00, 0x07, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 
  0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x01, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x3f, 0xfe, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0xff, 
  0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfc, 0x00, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x01, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x07, 0xe0, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x0f, 0xe0, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xf0, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x0f, 0xff, 0xff, 0xff, 
  0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xe0, 
  0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x0f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 
  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 
  0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xfc, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 
  0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x03, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0x00, 
  0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x01, 
  0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf0, 0x01, 
  0xff, 0xfc, 0x01, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x7f, 0xff, 0xfe, 0x00, 0x00, 0x0f, 0xf0, 0x1f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xf0, 0x00, 0x00, 0x03, 0xc0, 0x7f, 0xff, 0xff, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x00, 0x00, 
  0x81, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 
  0xff, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xf8, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x3f, 
  0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 
  0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc1, 0xff, 0xff, 0x80, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 
  0xc1, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xff, 0xff, 0xc1, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x07, 0xff, 0xff, 0x80, 0xff, 0xff, 0xe0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0x07, 0xfe, 0xff, 0x80, 
  0xff, 0xbf, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 
  0xff, 0x8f, 0xfc, 0x7f, 0x80, 0xff, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0x1f, 0xf8, 0x1e, 0x00, 0x3c, 0x0f, 0xf8, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xfe, 0x1f, 0xf0, 0x08, 0x00, 0x00, 
  0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfe, 
  0x3f, 0xf0, 0x00, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xfe, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xfc, 0x7f, 0xfc, 0x00, 0x00, 0x00, 0x1f, 
  0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xfc, 0x7f, 
  0xfe, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x0f, 0xff, 0xfc, 0x7f, 0xfe, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xfc, 0xff, 0xfe, 0x00, 0x1c, 0x00, 0x3f, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf8, 0xff, 0xfe, 
  0x00, 0xff, 0x80, 0x3f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x01, 0xff, 0xf8, 0xff, 0xfc, 0x01, 0xff, 0xc0, 0x1f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf8, 0xff, 0xfc, 0x03, 0xff, 0xe0, 0x1f, 0xff, 0x80, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf8, 0xff, 0xf8, 0x03, 
  0xff, 0xe0, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x3f, 0xf8, 0xff, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0xff, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x7f, 0x80, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xe1, 0xff, 0x00, 0x07, 0xff, 
  0xf0, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 
  0xc0, 0xff, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0xff, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x7f, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xff, 0x00, 0x07, 0xff, 0xe0, 
  0x00, 0x7f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xff, 0xfc, 0x03, 0xff, 0xe0, 0x1f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0x00, 0xff, 0xfc, 0x03, 0xff, 0xc0, 0x1f, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xfc, 0x01, 0xff, 0xc0, 0x3f, 
  0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 
  0xfe, 0x00, 0x7f, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x18, 0x00, 0x3f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x00, 0x00, 0x3f, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfc, 
  0x00, 0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x1f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x0f, 0xfe, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf0, 0x00, 
  0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0xf8, 0x0c, 0x00, 0x18, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x3f, 0x00, 0x7e, 0x1f, 0xf8, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x7f, 0x80, 
  0xff, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x07, 0xff, 0xff, 0x80, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0x80, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xc1, 0xff, 
  0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x01, 0xff, 0xff, 0xc1, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc1, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xfe, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x1f, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xf0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf8, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
#define FinPr_scan_width 120
#define FinPr_scan_height 119
const uint8_t PROGMEM FinPr_scan_bits[] = {
0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xfc, 0xff, 
  0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xfc, 0xff, 0xff, 
  0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0x80, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0x80, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 
  0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf1, 0xf6, 0x18, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x03, 0xcf, 0xe7, 0xc1, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x07, 0x38, 0x00, 0xf1, 0x80, 0x00, 
  0x00, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x0c, 0xe3, 0xff, 0x1c, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x19, 0xcf, 0x87, 0xce, 0x70, 0x00, 0x00, 0x00, 
  0x00, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x33, 0x38, 0xfc, 0x73, 0x30, 0x00, 0x00, 0x00, 0x00, 
  0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x66, 0x73, 0xff, 0x99, 0x98, 0x00, 0x00, 0x00, 0x00, 0xfc, 
  0xfc, 0x00, 0x00, 0x00, 0x00, 0xdc, 0xce, 0x01, 0xec, 0xec, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 
  0x00, 0x00, 0x00, 0x01, 0xbb, 0x19, 0xde, 0x70, 0x76, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0x00, 
  0x00, 0x00, 0x03, 0x37, 0x07, 0xcf, 0x98, 0xb3, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 
  0x00, 0x06, 0x6c, 0xce, 0x00, 0xcc, 0xd9, 0x80, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0x00, 
  0x0e, 0xd9, 0xb9, 0xfe, 0x67, 0x6c, 0xc0, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x05, 
  0x9b, 0x73, 0x87, 0x3b, 0x36, 0xc0, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x13, 0x36, 
  0xee, 0x71, 0x8d, 0x93, 0x60, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x13, 0x6c, 0xdc, 
  0xfc, 0xec, 0xdb, 0x20, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x36, 0xdb, 0xb3, 0x87, 
  0x32, 0x6d, 0xb0, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x64, 0xd3, 0x76, 0x69, 0xb3, 
  0x76, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6d, 0xb6, 0x6c, 0xcc, 0xd9, 0xb6, 
  0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdb, 0x6c, 0x99, 0x86, 0x6c, 0xdb, 0x6c, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd3, 0x6d, 0xb3, 0x7b, 0x36, 0xcd, 0x24, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xb6, 0xdb, 0x76, 0xed, 0x93, 0x6d, 0xb6, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x36, 0xb2, 0x6d, 0xc6, 0xcb, 0x36, 0xd2, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x03, 0x6d, 0xb6, 0xc9, 0xb3, 0x6d, 0xb6, 0xdb, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x02, 0x69, 0x64, 0x9b, 0x7b, 0x26, 0x83, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x06, 0xdb, 0x6d, 0xb6, 0xcd, 0xb6, 0xc3, 0x6d, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x06, 0xd2, 0xc9, 0x26, 0xc6, 0xd3, 0x6d, 0xa5, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x04, 0xb6, 0xdb, 0x6d, 0x96, 0xdb, 0x6d, 0xb6, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 
  0xb5, 0xb6, 0xdb, 0x7b, 0x6d, 0xb6, 0xd6, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x6d, 
  0xb6, 0xdb, 0x69, 0x6c, 0xb6, 0xda, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x6f, 0x64, 
  0xb6, 0xcd, 0xb6, 0xd2, 0xcb, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x6b, 0x6c, 0x36, 
  0xce, 0x86, 0xcb, 0x6b, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0xd8, 0x49, 0x6d, 0xb6, 
  0xdb, 0x6b, 0x6d, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0xd6, 0xdb, 0x6d, 0x7a, 0x4b, 
  0x6d, 0xa5, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0xb6, 0xda, 0x7a, 0x7b, 0x6d, 0x2d, 
  0xb6, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0xb6, 0x96, 0xda, 0x4d, 0x2d, 0xb4, 0xb6, 
  0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6d, 0xad, 0xb6, 0xd6, 0xcd, 0xb6, 0xb6, 0xd6, 0x18, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6d, 0x6d, 0x25, 0x96, 0xc6, 0xb6, 0xd6, 0xda, 0x18, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0x6d, 0x6d, 0xa5, 0x96, 0xd6, 0xd2, 0xdb, 0x48, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x7b, 0x6b, 0x6d, 0xed, 0xb6, 0xd2, 0x4b, 0x6b, 0x68, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xdb, 0x5b, 0x0b, 0x6d, 0x3b, 0x5b, 0x6b, 0x6d, 0x6c, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xda, 0xda, 0xdb, 0x6b, 0x78, 0x6b, 0x6d, 0x6d, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0xd2, 0xd6, 0xdb, 0x5b, 0x6c, 0x6d, 0x6d, 0x6d, 0xac, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xf6, 0xd6, 0xd6, 0xda, 0x4d, 0xed, 0xa5, 0xa5, 0xb4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb6, 
  0xb6, 0x96, 0xd6, 0xcd, 0xad, 0xb5, 0xb0, 0xb6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xb7, 
  0xb2, 0xb6, 0xc6, 0xb6, 0xb6, 0xb0, 0xb6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xb1, 0xb5, 0xb0, 
  0xb6, 0x86, 0xb6, 0xb6, 0xb0, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xa5, 0xa5, 0xad, 0xa4, 
  0xb6, 0xd6, 0xd6, 0xd2, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xf7, 
  0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfc, 0x00, 0x00, 0x00, 0x00, 0x03, 0x6f, 0x6b, 0x6b, 0x6b, 0x6b, 0x6b, 0x7b, 0x6b, 0x49, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0x69, 0x4b, 0x6b, 0x6b, 0x49, 0x69, 0x6b, 0x6b, 0x08, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x6b, 0x4b, 0x4a, 0x4a, 0x49, 0x69, 0x6b, 0x69, 0x08, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x4b, 0x4b, 0x4a, 0x4a, 0x49, 0x6d, 0x6b, 0x69, 0x08, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x4b, 0x4b, 0x5a, 0x4a, 0x49, 0x6d, 0x6b, 0x69, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x4b, 0x4b, 0x58, 0x58, 0x49, 0x6c, 0x61, 0x69, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 
  0x4a, 0x4b, 0x5b, 0x4a, 0x49, 0x2d, 0x69, 0x69, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x48, 
  0x4b, 0x5b, 0x4a, 0x49, 0x6d, 0x69, 0x09, 0x4b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x4b, 0x4b, 
  0x5b, 0x4a, 0x49, 0x6d, 0x69, 0x69, 0x4b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x4b, 0x4b, 0x4b, 
  0x4a, 0x69, 0x6d, 0x6b, 0x6b, 0x4b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x4b, 0x4b, 0x4b, 0x4a, 
  0x49, 0x69, 0x6b, 0x6b, 0x4b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x69, 0x6b, 0x4b, 0x4b, 0x63, 
  0x6b, 0x4b, 0x6b, 0x4a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x69, 0x6b, 0x69, 0x6b, 0x6b, 0x4b, 
  0x1a, 0x4b, 0x4a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x6d, 0x09, 0x69, 0x69, 0x6b, 0x4a, 0x5a, 
  0x5b, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x6d, 0x0d, 0x29, 0x6d, 0x3b, 0x0a, 0x58, 0x5a, 
  0x5a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x6d, 0x2d, 0x21, 0xa5, 0xb2, 0x1a, 0x52, 0xda, 0x5a, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x25, 0x2d, 0xa5, 0xb4, 0x86, 0xd2, 0xd6, 0xd2, 0xd2, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0x25, 0xa5, 0xa4, 0xb6, 0xe4, 0xb6, 0x96, 0xd6, 0xd6, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xa4, 0xb4, 0xb6, 0xd2, 0x21, 0xa4, 0xb4, 0xb6, 0x96, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xb6, 0xb6, 0x96, 0xdb, 0x03, 0x6d, 0xa4, 0x86, 0xb4, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xb6, 0x96, 0xda, 0x6c, 0x1e, 0x49, 0x2d, 0x84, 0xb4, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x92, 0xd2, 0x4b, 0x66, 0x01, 0x93, 0x69, 0x0d, 0xa4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xd2, 0x5a, 0x6d, 0x33, 0xef, 0x22, 0x5b, 0x6d, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5b, 
  0x6b, 0x64, 0x98, 0xf8, 0x66, 0xd3, 0x4b, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x6d, 
  0x36, 0xce, 0x01, 0xcd, 0xb2, 0xdb, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0xad, 0x93, 
  0x63, 0xff, 0x19, 0x26, 0x92, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0xb6, 0x99, 0x30, 
  0x00, 0x32, 0x6d, 0xb6, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0xd6, 0x4d, 0x8f, 0x03, 
  0xce, 0xc9, 0x34, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0xdb, 0x66, 0xe3, 0xef, 0x1c, 
  0x9b, 0x6d, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x69, 0x13, 0x38, 0x00, 0x71, 0x36, 
  0x69, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x65, 0x99, 0x8f, 0xcf, 0xc6, 0x64, 0xdb, 
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x34, 0xcc, 0xe1, 0xfe, 0x1c, 0xcd, 0x92, 0x40, 
  0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x0d, 0x90, 0x67, 0x3c, 0x00, 0xf1, 0x99, 0x26, 0xc0, 0x00, 
  0x00, 0xfc, 0xfc, 0x00, 0x00, 0x04, 0xd9, 0x31, 0xc7, 0xdf, 0x87, 0x72, 0x64, 0x80, 0x00, 0x00, 
  0xfc, 0xfc, 0x00, 0x00, 0x02, 0x4c, 0x8c, 0xf0, 0x00, 0x3c, 0xc4, 0xc9, 0x00, 0x00, 0x00, 0xfc, 
  0xfc, 0x00, 0x00, 0x03, 0x06, 0xc7, 0x1f, 0xe6, 0x73, 0x89, 0x9b, 0x00, 0x00, 0x00, 0xfc, 0xfc, 
  0x00, 0x00, 0x01, 0x13, 0x33, 0x83, 0xfe, 0x0f, 0x33, 0x36, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0x00, 
  0x00, 0x00, 0x99, 0x98, 0xf0, 0x00, 0xf8, 0xe6, 0x0c, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 
  0x00, 0xcc, 0xce, 0x1f, 0xbf, 0xe1, 0x8c, 0x08, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0x00, 
  0x66, 0x03, 0xc0, 0x98, 0x03, 0x39, 0xb0, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x33, 
  0x80, 0x78, 0x00, 0xf8, 0xe7, 0x60, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x08, 0xc3, 
  0x0f, 0xff, 0xc3, 0x8c, 0xc0, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x06, 0x71, 0xe0, 
  0x00, 0x1e, 0x39, 0x80, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x03, 0x1c, 0x3f, 0x87, 
  0xf0, 0xe7, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x01, 0xc7, 0x03, 0xff, 0x83, 
  0x8e, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x70, 0xf0, 0x00, 0x3e, 0x38, 
  0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x1f, 0xff, 0xe0, 0xe0, 0x00, 
  0x00, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x60, 0x0f, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xfc, 0xfe, 0x80, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x02, 0xfc, 
  0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xfc, 0xff, 
  0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xfc, 0xff, 0xff, 
  0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0x80, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0x80, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
#define FinPr_start_width 128
#define FinPr_start_height 128
const uint8_t PROGMEM FinPr_start_bits[] = {
    0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0xff, 0xf0, 0x00, 0x01, 0xf8, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xff, 0x80, 0x00, 0x1f, 0xf0, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xfe, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x07, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xf0, 0x01, 0xff, 0xff, 0xff, 0xfe, 0x01, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x40, 0x0f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x07, 0xff, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x1e, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xff, 0xc0, 0x00, 0x07, 0xff, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0xff, 0x00, 0x00, 0x07, 0xff, 0xf8, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x07, 0xfc, 0x00, 0xf0, 0x07, 0xff, 0xfe, 0x00, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1f, 0xf0, 0x07, 0xf0, 0x07, 0xff, 0xff, 0xc0, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x3f, 0xc0, 0x3f, 0xf8, 0x01, 0xff, 0xff, 0xf8, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x7f, 0x80, 0xff, 0xf0, 0x00, 0x00, 0xff, 0xfc, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0xfe, 0x03, 0xff, 0xe0, 0x00, 0x00, 0x0f, 0xff, 0x01, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x03, 0xfc, 0x0f, 0xff, 0x00, 0x00, 0x00, 0x01, 0xff, 0xc0, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x07, 0xf8, 0x3f, 0xf8, 0x00, 0x1f, 0x80, 0x00, 0x3f, 0xe0, 0x7f, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x0f, 0xe0, 0x7f, 0xe0, 0x07, 0xff, 0xc0, 0x00, 0x0f, 0xf8, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x0f, 0xc0, 0x7f, 0x80, 0x7f, 0xff, 0xc0, 0xf8, 0x03, 0xfc, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x0f, 0x80, 0x7e, 0x03, 0xff, 0xff, 0xc1, 0xfe, 0x01, 0xff, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 
  0x07, 0x00, 0x38, 0x0f, 0xff, 0xff, 0xc1, 0xff, 0x80, 0x7f, 0x83, 0xf8, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1c, 0x00, 0x3f, 0xff, 0xc0, 0x00, 0xff, 0xe0, 0x3f, 0xc1, 0xfc, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x3e, 0x00, 0xff, 0xf8, 0x00, 0x00, 0x3f, 0xf8, 0x0f, 0xe0, 0xfc, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x7e, 0x01, 0xff, 0xc0, 0x00, 0x00, 0x0f, 0xfc, 0x07, 0xf0, 0x7c, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0xfe, 0x03, 0xfe, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x03, 0xf8, 0x38, 0x00, 0x00, 0x00, 0x00, 
  0x01, 0xfc, 0x0f, 0xf8, 0x07, 0xc0, 0x3c, 0x00, 0xfe, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x01, 0xf8, 0x1f, 0xe0, 0x3f, 0xe0, 0x7f, 0xc0, 0x3c, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x03, 0xf0, 0x3f, 0xc1, 0xff, 0xe0, 0x7f, 0xf0, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x07, 0xe0, 0x7f, 0x03, 0xff, 0xe0, 0x7f, 0xfc, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x07, 0xc0, 0xfe, 0x03, 0xff, 0x80, 0x1f, 0xff, 0x00, 0x70, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x0f, 0xc1, 0xfc, 0x03, 0xf8, 0x00, 0x03, 0xff, 0xc0, 0x78, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x1f, 0x83, 0xf8, 0x43, 0xe0, 0x00, 0x00, 0x7f, 0xe0, 0xfc, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x1f, 0x07, 0xf1, 0xe0, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0x7e, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x3f, 0x0f, 0xe3, 0xf0, 0x00, 0x0f, 0x80, 0x07, 0xf8, 0x7f, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x3e, 0x0f, 0xc3, 0xf0, 0x01, 0xff, 0xfc, 0x01, 0xfc, 0x3f, 0x83, 0xf0, 0x00, 0x00, 0x00, 0x00, 
  0x7e, 0x1f, 0x87, 0xe0, 0x0f, 0xff, 0xff, 0x00, 0xfe, 0x1f, 0x81, 0xf0, 0x00, 0x00, 0x00, 0x00, 
  0x7c, 0x3f, 0x0f, 0xc0, 0x3f, 0xff, 0xff, 0xc0, 0x7f, 0x0f, 0xc1, 0xf0, 0x00, 0x00, 0x00, 0x00, 
  0x7c, 0x3e, 0x1f, 0x80, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0x87, 0xe0, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0xf8, 0x7e, 0x3f, 0x01, 0xff, 0xf0, 0x7f, 0xf8, 0x1f, 0xc7, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xf8, 0x7c, 0x3f, 0x03, 0xfe, 0x00, 0x07, 0xfc, 0x07, 0xc3, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xf8, 0xfc, 0x7e, 0x07, 0xf8, 0x00, 0x01, 0xfe, 0x07, 0xe1, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xf0, 0xf8, 0x7c, 0x0f, 0xe0, 0x00, 0x00, 0x7f, 0x03, 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x01, 0xf0, 0xfc, 0x1f, 0xc0, 0x3f, 0xc0, 0x3f, 0x81, 0xf0, 0x00, 0x0f, 0xff, 0xc0, 0x00, 0x00, 
  0x01, 0xf0, 0xf8, 0x3f, 0x81, 0xff, 0xf8, 0x1f, 0xc1, 0xf8, 0x00, 0x7f, 0xff, 0xf8, 0x00, 0x00, 
  0x01, 0xf1, 0xf8, 0x7f, 0x07, 0xff, 0xfe, 0x0f, 0xe0, 0xf8, 0x03, 0xff, 0xff, 0xff, 0x00, 0x00, 
  0x03, 0xe1, 0xf0, 0x7e, 0x0f, 0xff, 0xff, 0x07, 0xe0, 0xf8, 0x07, 0xff, 0xff, 0xff, 0xc0, 0x00, 
  0x03, 0xe3, 0xf0, 0xfc, 0x1f, 0xff, 0xff, 0x83, 0xf0, 0x70, 0x1f, 0xff, 0xff, 0xff, 0xf0, 0x00, 
  0x07, 0xe3, 0xe0, 0xf8, 0x3f, 0xc0, 0x7f, 0xc1, 0xf0, 0x00, 0x7f, 0xf8, 0x00, 0x7f, 0xf8, 0x00, 
  0x07, 0xc3, 0xe1, 0xf8, 0x7f, 0x00, 0x0f, 0xe0, 0xf8, 0x00, 0xff, 0xc0, 0x00, 0x1f, 0xfc, 0x00, 
  0x07, 0xc3, 0xe1, 0xf0, 0xfe, 0x00, 0x07, 0xf0, 0xf8, 0x01, 0xff, 0x00, 0x00, 0x07, 0xfe, 0x00, 
  0x07, 0xc7, 0xc3, 0xf0, 0xfc, 0x04, 0x03, 0xf0, 0xfc, 0x03, 0xfc, 0x00, 0x00, 0x03, 0xff, 0x00, 
  0x07, 0xc7, 0xc3, 0xe1, 0xf8, 0x3f, 0x81, 0xf8, 0x7c, 0x07, 0xf8, 0x00, 0x00, 0x01, 0xff, 0x80, 
  0x07, 0x87, 0xc3, 0xe1, 0xf0, 0x7f, 0xe0, 0xf8, 0x7e, 0x0f, 0xe0, 0x00, 0x30, 0x00, 0xff, 0xc0, 
  0x0f, 0x87, 0xc3, 0xe3, 0xf0, 0xff, 0xf0, 0xf8, 0x3c, 0x0f, 0xc0, 0x1f, 0xff, 0xe0, 0x7f, 0xe0, 
  0x0f, 0x87, 0xc7, 0xc3, 0xe1, 0xff, 0xf0, 0xfc, 0x1c, 0x1f, 0x80, 0xff, 0xff, 0xfc, 0x3f, 0xf0, 
  0x0f, 0x87, 0xc7, 0xc3, 0xe1, 0xf9, 0xf8, 0x7c, 0x00, 0x3f, 0x03, 0xff, 0xff, 0xff, 0x9f, 0xf0, 
  0x0f, 0x87, 0x87, 0xc3, 0xe3, 0xf0, 0xf8, 0x7c, 0x00, 0x3f, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf8, 
  0x0f, 0x87, 0x87, 0xc3, 0xe3, 0xe0, 0x78, 0x7c, 0x00, 0x7e, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xf8, 
  0x0f, 0x8f, 0x87, 0xc3, 0xc3, 0xe0, 0x7c, 0x7c, 0x00, 0x7c, 0x7f, 0xf8, 0x00, 0x3f, 0xff, 0xfc, 
  0x0f, 0x8f, 0x87, 0xc3, 0xc3, 0xe0, 0x7c, 0x7c, 0x00, 0xfc, 0xff, 0xc0, 0x00, 0x07, 0xff, 0xfc, 
  0x0f, 0x8f, 0x87, 0xc3, 0xc3, 0xe0, 0x7c, 0x7c, 0x00, 0xf9, 0xfe, 0x00, 0x00, 0x01, 0xff, 0xfe, 
  0x0f, 0x8f, 0x87, 0xc3, 0xc3, 0xe0, 0x7c, 0x7c, 0x00, 0xf9, 0xfc, 0x00, 0x00, 0x00, 0x7f, 0xfe, 
  0x0f, 0x8f, 0x87, 0xc3, 0xc3, 0xe0, 0x7c, 0x7c, 0x01, 0xf1, 0xf0, 0x00, 0x00, 0x00, 0x1f, 0xfe, 
  0x0f, 0x8f, 0x87, 0xc3, 0xc3, 0xe0, 0x7c, 0x7c, 0x01, 0xf1, 0xf0, 0x00, 0x00, 0x00, 0x1f, 0xfe, 
  0x0f, 0x8f, 0x87, 0xc3, 0xc3, 0xe0, 0x7c, 0x7c, 0x01, 0xf1, 0xf0, 0x00, 0x00, 0x00, 0x1f, 0xff, 
  0x0f, 0x8f, 0x87, 0xc3, 0xc3, 0xe0, 0x7c, 0x7c, 0x01, 0xf1, 0xf0, 0x00, 0x00, 0x00, 0x3f, 0xff, 
  0x0f, 0x8f, 0x87, 0xc3, 0xc3, 0xe0, 0x7c, 0x7c, 0x03, 0xe1, 0xf0, 0x00, 0x00, 0x00, 0x3f, 0xff, 
  0x07, 0x0f, 0x87, 0xc3, 0xc3, 0xe0, 0x7c, 0x7c, 0x03, 0xe1, 0xf0, 0x00, 0x38, 0x00, 0x3f, 0xff, 
  0x00, 0x0f, 0x87, 0xc3, 0xc3, 0xe0, 0x7c, 0x7c, 0x03, 0xe1, 0xf0, 0x07, 0xff, 0x80, 0x3f, 0xff, 
  0x00, 0x0f, 0x87, 0xc3, 0xc3, 0xe0, 0x7c, 0x7c, 0x03, 0xe1, 0xf0, 0x1f, 0xff, 0xe0, 0x3f, 0xff, 
  0x00, 0x0f, 0x87, 0xc3, 0xc3, 0xe0, 0x7c, 0x7c, 0x03, 0xe1, 0xf8, 0x3f, 0xff, 0xf0, 0x3f, 0xff, 
  0x00, 0x0f, 0x87, 0xc3, 0xc3, 0xe0, 0x7c, 0x3c, 0x03, 0xe1, 0xf8, 0x7f, 0xff, 0xfc, 0x3f, 0xff, 
  0x00, 0x0f, 0x87, 0xc3, 0xc3, 0xe0, 0x7c, 0x3e, 0x03, 0xe0, 0xf8, 0xff, 0xff, 0xfe, 0x3f, 0xff, 
  0x00, 0x0f, 0x87, 0xc3, 0xc3, 0xe0, 0x7c, 0x3e, 0x03, 0xe0, 0xf9, 0xfe, 0x01, 0xfe, 0x3f, 0xff, 
  0x00, 0x0f, 0x87, 0xc3, 0xc3, 0xe0, 0x7c, 0x3e, 0x03, 0xe0, 0xf9, 0xf8, 0x00, 0x7e, 0x7f, 0xff, 
  0x00, 0x0f, 0x87, 0xc3, 0xc3, 0xe0, 0x7c, 0x3e, 0x03, 0xe0, 0xf8, 0xf0, 0x00, 0x3e, 0x7d, 0xff, 
  0x00, 0x07, 0x87, 0xc3, 0xc3, 0xe0, 0x7c, 0x1f, 0x03, 0xe0, 0xf8, 0x40, 0x00, 0x0c, 0x7d, 0xff, 
  0x00, 0x07, 0x87, 0xc3, 0xc3, 0xe0, 0x7c, 0x1f, 0x03, 0xe0, 0xf8, 0x00, 0x00, 0x00, 0x7d, 0xff, 
  0x00, 0x00, 0x07, 0xc3, 0xc3, 0xe0, 0x7c, 0x1f, 0x03, 0xe0, 0xf8, 0x00, 0x00, 0x00, 0x7d, 0xff, 
  0x00, 0x00, 0x07, 0xc3, 0xc3, 0xe0, 0x3e, 0x0f, 0x03, 0xe0, 0xff, 0xe0, 0x00, 0x0f, 0xfd, 0xff, 
  0x00, 0x00, 0x07, 0xc3, 0xc3, 0xe0, 0x3e, 0x06, 0x03, 0xe0, 0x7f, 0xff, 0xff, 0xff, 0xfd, 0xff, 
  0x00, 0x00, 0x07, 0xc3, 0xc3, 0xe0, 0x3f, 0x00, 0x03, 0xe0, 0x7f, 0xff, 0xff, 0xff, 0xf9, 0xff, 
  0x00, 0x03, 0x07, 0xc3, 0xe1, 0xf0, 0x1f, 0x00, 0x03, 0xe0, 0x3f, 0xff, 0xff, 0xff, 0xf1, 0xff, 
  0x00, 0x07, 0x87, 0xc3, 0xe1, 0xf0, 0x1f, 0x80, 0x03, 0xe0, 0x1f, 0xff, 0xff, 0xff, 0xe1, 0xff, 
  0x00, 0x07, 0x87, 0xc3, 0xe1, 0xf0, 0x0f, 0x80, 0x03, 0xe0, 0x07, 0xff, 0xff, 0xff, 0xc1, 0xff, 
  0x00, 0x0f, 0x87, 0xc3, 0xe1, 0xf8, 0x0f, 0xc0, 0x03, 0xe0, 0x03, 0xff, 0xff, 0xff, 0x01, 0xff, 
  0x00, 0x0f, 0x87, 0xc3, 0xe0, 0xf8, 0x07, 0xe0, 0x03, 0xe0, 0x00, 0x1f, 0xff, 0xf0, 0x01, 0xff, 
  0x00, 0x0f, 0x87, 0xc3, 0xe0, 0xf8, 0x07, 0xf0, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0x00, 0x0f, 0x87, 0xc3, 0xf0, 0xfc, 0x03, 0xf8, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0x00, 0x0f, 0x87, 0xc1, 0xf0, 0x7e, 0x01, 0xfc, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0x00, 0x07, 0x83, 0xc1, 0xf0, 0x3e, 0x00, 0xfe, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0x00, 0x07, 0x83, 0xe1, 0xf8, 0x3f, 0x00, 0x7f, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0x00, 0x07, 0xc3, 0xe0, 0xf8, 0x1f, 0x80, 0x3f, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0x00, 0x07, 0xc3, 0xe0, 0xfc, 0x1f, 0xc0, 0x1f, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0x00, 0x07, 0xc1, 0xf0, 0x7e, 0x0f, 0xe0, 0x0e, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0x00, 0x07, 0xc1, 0xf0, 0x3e, 0x07, 0xf8, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0x00, 0x07, 0xc1, 0xf8, 0x3f, 0x03, 0xfc, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0x00, 0x03, 0xc0, 0xf8, 0x1f, 0x81, 0xfe, 0x00, 0x03, 0xe0, 0x00, 0x1f, 0xff, 0xf0, 0x01, 0xff, 
  0x00, 0x03, 0xc0, 0xfc, 0x0f, 0xc0, 0x7f, 0x00, 0x03, 0xe0, 0x00, 0x3f, 0xff, 0xf8, 0x01, 0xff, 
  0x00, 0x01, 0x80, 0x7e, 0x07, 0xf0, 0x3f, 0x80, 0x03, 0xe0, 0x00, 0x7f, 0xff, 0xf8, 0x01, 0xff, 
  0x00, 0x00, 0x00, 0x3f, 0x03, 0xf8, 0x1f, 0xe0, 0x03, 0xe0, 0x00, 0x7f, 0xff, 0xf8, 0x01, 0xff, 
  0x00, 0x00, 0x00, 0x3f, 0x81, 0xfc, 0x0f, 0xf0, 0x03, 0xe0, 0x00, 0x3f, 0xff, 0xf8, 0x01, 0xff, 
  0x00, 0x00, 0x00, 0x1f, 0xc0, 0xff, 0x07, 0xf8, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0x00, 0x00, 0x00, 0x0f, 0xe0, 0x7f, 0x81, 0xfc, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0x00, 0x00, 0x00, 0x07, 0xf8, 0x3f, 0xc0, 0xfe, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0x00, 0x00, 0x00, 0x03, 0xfc, 0x0f, 0xf0, 0x7f, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0x00, 0x00, 0x00, 0x01, 0xfe, 0x07, 0xf8, 0x3f, 0x03, 0xe0, 0x00, 0x3f, 0xff, 0xf8, 0x01, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0x7f, 0x83, 0xfc, 0x0f, 0x03, 0xe0, 0x00, 0x7f, 0xff, 0xf8, 0x01, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0x3f, 0xc1, 0xff, 0x00, 0x03, 0xe0, 0x00, 0x7f, 0xff, 0xf8, 0x01, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x7f, 0x80, 0x03, 0xe0, 0x00, 0x3f, 0xff, 0xf8, 0x01, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0xf8, 0x3f, 0xe0, 0x03, 0xe0, 0x00, 0x1f, 0xff, 0xf0, 0x01, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x0f, 0xe0, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x07, 0xc0, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x81, 0x80, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f
};
//---------------------------------------------------------------
#define FinPr_valid_width 110
#define FinPr_valid_height 114
const uint8_t PROGMEM FinPr_valid_bits[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xc0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x01, 0xff, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x01, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x3f, 0xe0, 
  0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0x00, 0x00, 
  0x00, 0x00, 0x1c, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 
  0x1c, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x1c, 0x00, 
  0x01, 0xc0, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x01, 0xfe, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x01, 0xc0, 
  0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x1c, 0x00, 0x01, 0xc0, 0x00, 0x00, 
  0x1f, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x1c, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x7e, 0x00, 
  0x7f, 0xf8, 0x03, 0xf0, 0x00, 0x00, 0x1c, 0x00, 0x01, 0xc0, 0x00, 0x00, 0xf8, 0x01, 0xff, 0xff, 
  0x00, 0xf8, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x03, 0xff, 0xff, 0xc0, 0x3c, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x01, 0x80, 0x0f, 0xf0, 0x1e, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x81, 0xc0, 0x00, 0x01, 0xfc, 0x0f, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0f, 0x03, 0xc0, 0x00, 0x00, 0x3e, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1e, 0x0f, 0x80, 0x00, 0x00, 0x1f, 0x83, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 
  0x1f, 0x00, 0xff, 0xf8, 0x07, 0xc1, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x3e, 0x03, 
  0xff, 0xfe, 0x03, 0xe0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x78, 0x0f, 0xff, 0xff, 
  0x81, 0xf0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x70, 0x3f, 0x80, 0x0f, 0xe0, 0xf0, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xe0, 0x7c, 0x00, 0x01, 0xf0, 0x78, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xe1, 0xe0, 0xf0, 0x00, 0x00, 0x78, 0x3c, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xc3, 0xc1, 0xe0, 0x1f, 0xc0, 0x3c, 0x1e, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x03, 0xc3, 0x83, 0xc0, 0xff, 0xf8, 0x1e, 0x0e, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x87, 
  0x87, 0x81, 0xff, 0xfc, 0x0f, 0x0f, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x87, 0x0f, 0x07, 
  0xf0, 0x7f, 0x07, 0x87, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0f, 0x0e, 0x0f, 0x80, 0x0f, 
  0x83, 0x87, 0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0e, 0x1e, 0x1e, 0x00, 0x03, 0xc3, 0xc3, 
  0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0e, 0x1c, 0x3c, 0x00, 0x01, 0xe1, 0xc3, 0x87, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0x1c, 0x3c, 0x38, 0x1f, 0xc0, 0xe1, 0xe3, 0xc7, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0e, 0x1c, 0x38, 0x78, 0x3f, 0xe0, 0xf0, 0xe1, 0xc3, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x0e, 0x1c, 0x38, 0x70, 0x7f, 0xf0, 0x70, 0xe1, 0xc3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x1c, 
  0x78, 0xf0, 0xf0, 0x78, 0x78, 0xf1, 0xc3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x1c, 0x70, 0xe1, 
  0xe0, 0x3c, 0x38, 0x71, 0xc3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x38, 0x70, 0xe1, 0xc0, 0x1c, 
  0x38, 0x71, 0xe3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x04, 0x38, 0x70, 0xe3, 0xc7, 0x1e, 0x38, 0x70, 
  0xe3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x70, 0xe3, 0x87, 0x0e, 0x38, 0x20, 0xe3, 0x80, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x70, 0xe3, 0x87, 0x0e, 0x38, 0x00, 0xe3, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x38, 0x70, 0xe3, 0x87, 0x0e, 0x38, 0x00, 0xe3, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x38, 0x70, 0xe3, 0x87, 0x0e, 0x38, 0x00, 0xe3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x38, 
  0x70, 0xe3, 0x87, 0x0e, 0x38, 0x00, 0xe3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x38, 0x70, 0xe3, 
  0x87, 0x0e, 0x38, 0x00, 0xe3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x38, 0x70, 0xe3, 0x87, 0x0e, 
  0x38, 0x70, 0xe3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x38, 0x70, 0xe3, 0x87, 0x0e, 0x38, 0x70, 
  0xe3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x38, 0x70, 0xe3, 0x87, 0x0e, 0x38, 0x70, 0xe3, 0x80, 
  0x00, 0x00, 0x00, 0x00, 0x0e, 0x38, 0x70, 0xe3, 0x82, 0x0e, 0x38, 0x70, 0xe3, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x0e, 0x38, 0x70, 0xe3, 0x80, 0x0e, 0x38, 0x70, 0xe3, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x0e, 0x38, 0x70, 0xe3, 0x80, 0x0e, 0x38, 0x70, 0xe3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x38, 
  0x70, 0xe3, 0x80, 0x0e, 0x38, 0x70, 0xe3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x38, 0x70, 0xe3, 
  0x80, 0x0e, 0x38, 0x70, 0xe3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x38, 0x70, 0xe3, 0x82, 0x0e, 
  0x38, 0x70, 0xe3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x38, 0x70, 0xe3, 0x87, 0x0e, 0x38, 0x70, 
  0xe3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x38, 0x70, 0xe3, 0x87, 0x0e, 0x38, 0x70, 0xe3, 0x80, 
  0x00, 0x00, 0x00, 0x00, 0x0e, 0x38, 0x70, 0x03, 0x87, 0x0e, 0x38, 0x70, 0xe3, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x0e, 0x38, 0x70, 0x03, 0x87, 0x0e, 0x38, 0x70, 0xe3, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x0e, 0x38, 0x70, 0x03, 0x87, 0x0e, 0x38, 0x70, 0xe3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x38, 
  0x70, 0x03, 0x87, 0x0e, 0x38, 0x70, 0xe3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x38, 0x70, 0x03, 
  0x87, 0x0e, 0x00, 0x00, 0xe3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x04, 0x38, 0x70, 0xc3, 0x87, 0x0e, 
  0x00, 0x00, 0xe3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x70, 0xe3, 0x87, 0x0c, 0x1f, 0xe0, 
  0xe3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x70, 0xe3, 0x87, 0x08, 0x7f, 0xfc, 0x63, 0x80, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x71, 0xc3, 0x87, 0x01, 0xff, 0xfe, 0x03, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xf0, 0xe1, 0xc3, 0x87, 0x03, 0xff, 0xff, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x07, 0xe0, 0xe1, 0xc3, 0x87, 0x07, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc1, 
  0xc1, 0xc7, 0x8e, 0x0f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x03, 0xc3, 0x87, 
  0x0e, 0x1f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x83, 0x87, 0x0e, 0x1f, 
  0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x87, 0x0f, 0x0e, 0x3f, 0xff, 0xff, 
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x0f, 0x0e, 0x1c, 0x3f, 0xff, 0xf7, 0xf0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x0e, 0x0e, 0x1c, 0x3f, 0xff, 0xe3, 0xf0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xf8, 0x1e, 0x1c, 0x3c, 0x3f, 0xff, 0xc7, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x03, 0xe0, 0x3c, 0x3c, 0x38, 0x7f, 0xdf, 0x8f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x78, 0x38, 0x38, 0x7f, 0x8f, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x78, 
  0x70, 0x7f, 0xc6, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0xf0, 0xf0, 0x7f, 
  0xe0, 0x7f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xc1, 0xe0, 0xe0, 0x3f, 0xf0, 0xff, 
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x03, 0xc1, 0xe1, 0x3f, 0xf9, 0xff, 0xf0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x07, 0x83, 0xc3, 0x3f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x10, 0x0f, 0x03, 0x83, 0x1f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x3e, 0x07, 0x87, 0x9f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xfc, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x1e, 
  0x0e, 0x07, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x7c, 0x1e, 0x03, 
  0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0xf8, 0x3c, 0x31, 0xff, 0xfe, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x01, 0xf0, 0x78, 0x38, 0xff, 0xfc, 0x00, 0x00, 
  0x1c, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x07, 0xc0, 0xf0, 0x78, 0x3f, 0xe0, 0x00, 0x00, 0x1c, 0x00, 
  0x01, 0xc0, 0x00, 0x00, 0x0f, 0x81, 0xe0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x01, 0xc0, 
  0x00, 0x00, 0x0e, 0x03, 0xc1, 0xe0, 0x80, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x01, 0xc0, 0x00, 0x00, 
  0x00, 0x07, 0x83, 0xc1, 0xe0, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x0f, 
  0x03, 0xc3, 0xc0, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x0e, 0x07, 0x83, 
  0x80, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x1c, 0x00, 0x01, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xfc, 0x00, 0x01, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 
  0x01, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
//---------------------------------------------------------------
#define FinPr_invalid_width 111
#define FinPr_invalid_height 112
const uint8_t PROGMEM FinPr_invalid_bits[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x07, 0xff, 0x80, 0x1f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 
  0xff, 0x80, 0x1f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x80, 
  0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x1c, 0x00, 
  0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x1c, 0x00, 0x00, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x03, 0x80, 0x1c, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0x80, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x03, 0x80, 0x1c, 0x00, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x01, 
  0xfe, 0x00, 0x00, 0x00, 0x03, 0x80, 0x1c, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00, 0x3f, 0x80, 
  0x00, 0x00, 0x03, 0x80, 0x1c, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 
  0x03, 0x80, 0x1c, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x7f, 0xe0, 0x03, 0xf0, 0x00, 0x00, 0x03, 0x80, 
  0x1c, 0x00, 0x00, 0x01, 0xf0, 0x03, 0xff, 0xfe, 0x00, 0xf8, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 
  0x00, 0x07, 0xc0, 0x07, 0xff, 0xff, 0xc0, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 
  0x80, 0x03, 0xe0, 0x7f, 0xf0, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x01, 0x00, 
  0x00, 0x03, 0xf8, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x07, 0x80, 0x00, 0x00, 
  0x7e, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x0f, 0x80, 0x00, 0x00, 0x1f, 0x03, 
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x1f, 0x00, 0x1f, 0x80, 0x0f, 0x81, 0xe0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x7c, 0x01, 0xff, 0xf8, 0x03, 0xe0, 0xf0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xe0, 0xf8, 0x0f, 0xff, 0xff, 0x01, 0xf0, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x01, 0xc1, 0xf0, 0x3f, 0xf0, 0xff, 0xc0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc1, 
  0xe0, 0x7f, 0x00, 0x0f, 0xe0, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x83, 0xc0, 0xf8, 
  0x00, 0x01, 0xf0, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x87, 0x83, 0xe0, 0x00, 0x00, 
  0x7c, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0xc0, 0x0f, 0x00, 0x3e, 0x0e, 
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x0f, 0x07, 0x80, 0xff, 0xf0, 0x1e, 0x0f, 0x07, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0e, 0x1e, 0x0f, 0x03, 0xff, 0xfc, 0x0f, 0x07, 0x87, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x1e, 0x1c, 0x1e, 0x07, 0xf9, 0xfe, 0x07, 0x83, 0x87, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x1c, 0x3c, 0x3c, 0x1f, 0x80, 0x1f, 0x83, 0xc3, 0xc3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x38, 
  0x38, 0x3e, 0x00, 0x07, 0xc1, 0xc3, 0xc3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x38, 0x78, 0x3c, 
  0x00, 0x03, 0xc1, 0xe1, 0xc3, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x38, 0x78, 0x70, 0x78, 0x06, 0x01, 
  0xe0, 0xe1, 0xe1, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x38, 0x70, 0x70, 0xf0, 0x3f, 0xc0, 0xf0, 0xe0, 
  0xe1, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x38, 0x70, 0xe0, 0xe0, 0x7f, 0xe0, 0x70, 0x70, 0xe1, 0xc0, 
  0x00, 0x00, 0x00, 0x00, 0x78, 0x70, 0xe1, 0xe0, 0xff, 0xf0, 0x78, 0x70, 0xe1, 0xe0, 0x00, 0x00, 
  0x00, 0x00, 0x70, 0xf0, 0xe1, 0xc1, 0xe0, 0x78, 0x38, 0x70, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x70, 0xe1, 0xe1, 0xc3, 0xc0, 0x3c, 0x38, 0x78, 0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x70, 0xe1, 
  0xe1, 0xc3, 0x80, 0x1c, 0x38, 0x78, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x20, 0xe1, 0xc3, 0x83, 
  0x86, 0x1c, 0x3c, 0x38, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0xc3, 0x87, 0x0f, 0x0e, 
  0x1c, 0x30, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0xc3, 0x87, 0x0f, 0x0e, 0x1c, 0x00, 
  0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0xc3, 0x87, 0x8f, 0x0e, 0x1c, 0x00, 0x70, 0xe0, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0xc3, 0x87, 0x0f, 0x0e, 0x1c, 0x00, 0x70, 0xe0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xe1, 0xc3, 0x87, 0x0f, 0x0e, 0x1c, 0x00, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x70, 0xe1, 0xc3, 0x87, 0x0f, 0x0e, 0x1c, 0x00, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x70, 0xe1, 
  0xc3, 0x87, 0x0f, 0x0e, 0x1c, 0x30, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x70, 0xe1, 0xc3, 0x87, 
  0x0f, 0x0e, 0x1c, 0x38, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x70, 0xe1, 0xc3, 0x87, 0x0f, 0x0e, 
  0x1c, 0x38, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x70, 0xe1, 0xc3, 0x87, 0x06, 0x0e, 0x1c, 0x38, 
  0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x70, 0xe1, 0xc3, 0x87, 0x00, 0x0e, 0x1c, 0x38, 0x70, 0xe0, 
  0x00, 0x00, 0x00, 0x00, 0x70, 0xe1, 0xc3, 0x87, 0x00, 0x0e, 0x1c, 0x38, 0x70, 0xe0, 0x00, 0x00, 
  0x00, 0x00, 0x70, 0xe1, 0xc3, 0x87, 0x00, 0x0e, 0x1c, 0x38, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x70, 0xe1, 0xc3, 0x87, 0x00, 0x0e, 0x1c, 0x38, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x70, 0xe1, 
  0xc3, 0x87, 0x00, 0x0e, 0x1c, 0x38, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x70, 0xe1, 0xc3, 0x87, 
  0x00, 0x0e, 0x1c, 0x38, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x70, 0xe1, 0xc3, 0x87, 0x06, 0x0e, 
  0x1c, 0x38, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x70, 0xe1, 0xc3, 0x87, 0x0f, 0x0e, 0x1c, 0x38, 
  0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x70, 0xe1, 0xc1, 0x07, 0x0f, 0x0e, 0x1c, 0x38, 0x70, 0xe0, 
  0x00, 0x00, 0x00, 0x00, 0x70, 0xe1, 0xc0, 0x07, 0x0f, 0x0e, 0x1c, 0x38, 0x70, 0xe0, 0x00, 0x00, 
  0x00, 0x00, 0x70, 0xe1, 0xc0, 0x07, 0x0f, 0x0e, 0x1c, 0x38, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x70, 0xe1, 0xc0, 0x07, 0x0f, 0x0e, 0x1c, 0x38, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x70, 0xe1, 
  0xc0, 0x07, 0x0f, 0x0e, 0x10, 0x18, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x70, 0xe1, 0xc0, 0x07, 
  0x0f, 0x0e, 0x00, 0x00, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0xc3, 0x87, 0x0f, 0x0e, 
  0x00, 0x00, 0x70, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0xc3, 0x87, 0x0f, 0x18, 0x1f, 0xf8, 
  0x30, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe1, 0xc3, 0x87, 0x0e, 0x10, 0xff, 0xfe, 0x10, 0xe0, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xc1, 0xc3, 0x87, 0x0e, 0x01, 0xff, 0xff, 0x00, 0xe0, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0xc3, 0xc3, 0x87, 0x0e, 0x03, 0xff, 0xff, 0x80, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x3f, 0x83, 0x87, 0x87, 0x0e, 0x07, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x07, 
  0x87, 0x0f, 0x0e, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x0f, 0x07, 0x0e, 
  0x1e, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x0f, 0x0e, 0x1c, 0x1f, 
  0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x0e, 0x1e, 0x1c, 0x3f, 0xff, 0xff, 
  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x1e, 0x1c, 0x1c, 0x3f, 0xe7, 0xcf, 0xf8, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x3c, 0x1c, 0x3c, 0x3f, 0xe3, 0x87, 0xfc, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0f, 0xe0, 0x38, 0x3c, 0x38, 0x7f, 0xe1, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x0f, 0xc0, 0x78, 0x78, 0x78, 0x7f, 0xf0, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 
  0xf0, 0x70, 0x70, 0x7f, 0xf8, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0xf0, 
  0xf0, 0x7f, 0xf8, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc1, 0xe0, 0xe0, 0x7f, 
  0xf0, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x81, 0xc1, 0xe0, 0x7f, 0xe1, 0x0f, 
  0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x03, 0xc1, 0xc0, 0x3f, 0xe3, 0x87, 0xfc, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x07, 0x83, 0xc2, 0x3f, 0xe7, 0xcf, 0xf8, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xf0, 0x1f, 0x07, 0x83, 0x3f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x3e, 0x0f, 0x07, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x7c, 0x0f, 0x07, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x1e, 
  0x0f, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x3c, 0x1e, 0x07, 
  0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 0xf8, 0x3c, 0x03, 0xff, 0xff, 
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x01, 0xf0, 0x38, 0x01, 0xff, 0xff, 0x00, 0x00, 
  0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x78, 0x30, 0xff, 0xfe, 0x00, 0x00, 0x03, 0x00, 
  0x1c, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0xf0, 0x78, 0x3f, 0xf8, 0x00, 0x00, 0x03, 0x80, 0x1c, 0x00, 
  0x00, 0x00, 0x1f, 0x01, 0xe0, 0xf0, 0x01, 0x00, 0x00, 0x00, 0x03, 0x80, 0x1c, 0x00, 0x00, 0x00, 
  0x1e, 0x03, 0xc1, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x1c, 0x00, 0x00, 0x00, 0x18, 0x0f, 
  0x81, 0xe0, 0xe0, 0x00, 0x00, 0x00, 0x03, 0x80, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x03, 0xc1, 
  0xe0, 0x00, 0x00, 0x00, 0x03, 0x80, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x07, 0x83, 0xc0, 0x00, 
  0x00, 0x00, 0x03, 0x80, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0f, 0x01, 0x80, 0x00, 0x00, 0x00, 
  0x03, 0x80, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 
  0x1f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x80, 0x1f, 0xfe, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x80, 0x1f, 0xfe, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
//---------------------------------------------------------------
#define FinPr_failed_width 120
#define FinPr_failed_height 147
const uint8_t PROGMEM FinPr_failed_bits[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x3f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 
  0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xc0, 
  0x00, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 
  0x0f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x03, 
  0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 0x00, 0x7f, 
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf0, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x3f, 0xff, 0x00, 0x0f, 0xf8, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x03, 0xff, 0xff, 0xe0, 0x03, 0xf8, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x0f, 0xff, 0xff, 0xfc, 0x01, 0xf8, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x1f, 0xff, 0xff, 0xff, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x7f, 0x00, 0x3f, 0xff, 0xff, 0xff, 0x80, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x7e, 0x06, 0x3f, 0xf0, 0x03, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x7c, 0x0f, 0x1f, 0x00, 0x00, 0x3f, 0x80, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x38, 0x1f, 0x88, 0x00, 0x00, 0x0f, 0x86, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x7f, 0x80, 0x00, 0x00, 0x00, 0x0f, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 
  0x00, 0x0f, 0xfe, 0x00, 0x0f, 0x81, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 
  0xff, 0xff, 0xc0, 0x0f, 0xc1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x01, 0xfc, 0x03, 0xff, 
  0xff, 0xf0, 0x0f, 0xe0, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x03, 0xf0, 0x0f, 0xff, 0xff, 
  0xfc, 0x07, 0xf0, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x07, 0xe0, 0x3f, 0xff, 0xff, 0xfe, 
  0x03, 0xf8, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x0f, 0xc0, 0x7f, 0xf8, 0x07, 0xff, 0x81, 
  0xfc, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x0f, 0xc0, 0xff, 0xc0, 0x00, 0xff, 0xc0, 0xfc, 
  0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x1f, 0x81, 0xfe, 0x00, 0x00, 0x3f, 0xe0, 0x7e, 0x0f, 
  0x80, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x3f, 0x03, 0xfc, 0x00, 0x00, 0x0f, 0xf0, 0x3f, 0x0f, 0xc0, 
  0x00, 0x00, 0x00, 0x00, 0xf8, 0x3e, 0x07, 0xf0, 0x00, 0x00, 0x07, 0xf8, 0x1f, 0x07, 0xc0, 0x00, 
  0x00, 0x00, 0x01, 0xf8, 0x7e, 0x03, 0xe0, 0x07, 0xfc, 0x01, 0xfc, 0x1f, 0x87, 0xe0, 0x00, 0x00, 
  0x00, 0x01, 0xf0, 0x7c, 0x03, 0xc0, 0x3f, 0xff, 0x00, 0xfc, 0x0f, 0xc3, 0xe0, 0x00, 0x00, 0x00, 
  0x03, 0xf0, 0xfc, 0x00, 0x00, 0x7f, 0xff, 0xc0, 0x7e, 0x07, 0xc3, 0xe0, 0x00, 0x00, 0x00, 0x03, 
  0xe0, 0xf8, 0x00, 0x01, 0xff, 0xff, 0xf0, 0x3f, 0x07, 0xe1, 0xf0, 0x00, 0x00, 0x00, 0x03, 0xe1, 
  0xf8, 0x70, 0x03, 0xff, 0xff, 0xf8, 0x3f, 0x83, 0xe1, 0xf0, 0x00, 0x00, 0x00, 0x07, 0xc1, 0xf0, 
  0xf8, 0x07, 0xfe, 0x0f, 0xfc, 0x1f, 0x83, 0xf1, 0xf8, 0x00, 0x00, 0x00, 0x07, 0xc1, 0xf1, 0xf8, 
  0x0f, 0xf0, 0x01, 0xfe, 0x0f, 0xc1, 0xf0, 0xf8, 0x00, 0x00, 0x00, 0x07, 0xc3, 0xe1, 0xf0, 0x1f, 
  0xc0, 0x00, 0x7f, 0x07, 0xc1, 0xf0, 0xf8, 0x00, 0x00, 0x00, 0x0f, 0x83, 0xe3, 0xf0, 0x3f, 0x80, 
  0x00, 0x3f, 0x87, 0xe0, 0xf8, 0x7c, 0x00, 0x00, 0x00, 0x0f, 0x83, 0xe3, 0xe0, 0x7f, 0x00, 0x00, 
  0x1f, 0xc3, 0xe0, 0xf8, 0x7c, 0x00, 0x00, 0x00, 0x0f, 0x87, 0xc3, 0xe0, 0x7e, 0x00, 0x00, 0x0f, 
  0xc3, 0xf0, 0xf8, 0x7c, 0x00, 0x00, 0x00, 0x0f, 0x07, 0xc7, 0xc0, 0xfc, 0x00, 0x00, 0x07, 0xe1, 
  0xf0, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x1f, 0x07, 0xc7, 0xc0, 0xf8, 0x07, 0xf8, 0x03, 0xe1, 0xf0, 
  0x7c, 0x3e, 0x00, 0x00, 0x00, 0x1f, 0x07, 0x87, 0xc1, 0xf8, 0x1f, 0xfe, 0x01, 0xf0, 0xf8, 0x7c, 
  0x3e, 0x00, 0x00, 0x00, 0x1f, 0x0f, 0x87, 0x81, 0xf0, 0x3f, 0xff, 0x01, 0xf0, 0xf8, 0x3e, 0x3e, 
  0x00, 0x00, 0x00, 0x1f, 0x0f, 0x8f, 0x83, 0xe0, 0x7f, 0xff, 0x80, 0xf8, 0xf8, 0x3e, 0x3e, 0x00, 
  0x00, 0x00, 0x1e, 0x0f, 0x8f, 0x83, 0xe0, 0xff, 0xff, 0xc0, 0xf8, 0x7c, 0x3e, 0x1e, 0x00, 0x00, 
  0x00, 0x3e, 0x0f, 0x8f, 0x87, 0xe1, 0xfc, 0x0f, 0xe0, 0xf8, 0x7c, 0x3e, 0x1e, 0x00, 0x00, 0x00, 
  0x3e, 0x0f, 0x0f, 0x87, 0xc1, 0xf8, 0x07, 0xe0, 0x78, 0x7c, 0x1e, 0x1f, 0x00, 0x00, 0x00, 0x3e, 
  0x0f, 0x0f, 0x87, 0xc3, 0xf0, 0x03, 0xf0, 0x7c, 0x7c, 0x1e, 0x1f, 0x00, 0x00, 0x00, 0x3e, 0x1f, 
  0x0f, 0x07, 0xc3, 0xe0, 0x01, 0xf0, 0x7c, 0x3c, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x3e, 0x1f, 0x0f, 
  0x07, 0x83, 0xe1, 0xc0, 0xf8, 0x7c, 0x3e, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x3e, 0x1f, 0x0f, 0x0f, 
  0x87, 0xc1, 0xe0, 0xf8, 0x7c, 0x3e, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x3e, 0x1f, 0x0f, 0x0f, 0x87, 
  0xc3, 0xe0, 0xf8, 0x3c, 0x3e, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x3e, 0x1f, 0x0f, 0x0f, 0x87, 0xc1, 
  0xe0, 0xf8, 0x3c, 0x3e, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x3e, 0x1f, 0x0f, 0x0f, 0x87, 0xc1, 0xf0, 
  0xf8, 0x10, 0x3e, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x3e, 0x1f, 0x0f, 0x8f, 0x87, 0xc1, 0xf0, 0xf8, 
  0x00, 0x3e, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x3e, 0x1f, 0x0f, 0x8f, 0x83, 0x81, 0xf0, 0x78, 0x00, 
  0x3e, 0x1f, 0x1f, 0x00, 0x00, 0x00, 0x3e, 0x0e, 0x0f, 0x8f, 0x81, 0x01, 0xf0, 0x78, 0x00, 0x3e, 
  0x1f, 0x1f, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x0f, 0x8f, 0x80, 0x01, 0xf0, 0x78, 0x18, 0x3e, 0x1e, 
  0x1f, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x0f, 0x8f, 0x80, 0x01, 0xf0, 0x78, 0x3c, 0x3c, 0x1e, 0x1f, 
  0x00, 0x00, 0x00, 0x3e, 0x0e, 0x0f, 0x8f, 0x80, 0x01, 0xf0, 0x7c, 0x7c, 0x3c, 0x1e, 0x1f, 0x00, 
  0x00, 0x00, 0x3e, 0x1e, 0x0f, 0x8f, 0x81, 0xc1, 0xf0, 0x7c, 0x7c, 0x7c, 0x3e, 0x1f, 0x00, 0x00, 
  0x00, 0x3e, 0x1f, 0x0f, 0x8f, 0x83, 0xe1, 0xf0, 0x7c, 0x7c, 0x7c, 0x3e, 0x1f, 0x00, 0x00, 0x00, 
  0x3e, 0x1f, 0x07, 0x87, 0x83, 0xe1, 0xf0, 0x7c, 0x7c, 0x7c, 0x3e, 0x1f, 0x00, 0x00, 0x00, 0x3e, 
  0x1f, 0x07, 0x87, 0x83, 0xe1, 0xf0, 0x7c, 0x7c, 0x7c, 0x3e, 0x1f, 0x00, 0x00, 0x00, 0x1e, 0x1f, 
  0x07, 0xc7, 0x83, 0xe1, 0xf0, 0x7c, 0x7c, 0x78, 0x3e, 0x1e, 0x00, 0x00, 0x00, 0x1f, 0x0f, 0x07, 
  0xc7, 0xc3, 0xe1, 0xf0, 0x7c, 0x7c, 0xf8, 0x3c, 0x3e, 0x00, 0x00, 0x00, 0x1f, 0x0f, 0x87, 0xc7, 
  0xc3, 0xe1, 0xf0, 0x7c, 0x7c, 0xf8, 0x7c, 0x3e, 0x00, 0x00, 0x00, 0x1f, 0x0f, 0x87, 0xc7, 0xc3, 
  0xe0, 0xe0, 0x78, 0x78, 0xf8, 0x7c, 0x3e, 0x00, 0x00, 0x00, 0x1f, 0x0f, 0x87, 0xc7, 0xc3, 0xe0, 
  0x00, 0x78, 0xf9, 0xf0, 0x7c, 0x3e, 0x00, 0x00, 0x00, 0x1f, 0x0f, 0x83, 0xc3, 0xc3, 0xe0, 0x00, 
  0x78, 0xf9, 0xf0, 0x7c, 0x3c, 0x00, 0x00, 0x00, 0x0f, 0x87, 0x83, 0xc3, 0xe3, 0xe0, 0x00, 0x78, 
  0xf9, 0x1f, 0xc0, 0x7c, 0x00, 0x00, 0x00, 0x0f, 0x87, 0xc3, 0xe3, 0xe3, 0xe0, 0x60, 0x78, 0xf3, 
  0xff, 0xfe, 0x7c, 0x00, 0x00, 0x00, 0x0f, 0x87, 0xc3, 0xe3, 0xe3, 0xe0, 0xf0, 0x79, 0xcf, 0xff, 
  0xff, 0x9c, 0x00, 0x00, 0x00, 0x0f, 0x87, 0xc3, 0xe3, 0xe3, 0xe0, 0xf0, 0xf9, 0xbf, 0xff, 0xff, 
  0xe0, 0x00, 0x00, 0x00, 0x07, 0xc3, 0xe3, 0xe3, 0xe3, 0xe0, 0xf0, 0xf8, 0xff, 0xe0, 0x3f, 0xf8, 
  0x00, 0x00, 0x00, 0x07, 0xc3, 0xe3, 0xe3, 0xe3, 0xe1, 0xf0, 0xf9, 0xfe, 0x00, 0x03, 0xfc, 0x00, 
  0x00, 0x00, 0x07, 0xc3, 0xe3, 0xe3, 0xe3, 0xe1, 0xf0, 0x7b, 0xf8, 0x00, 0x00, 0xfe, 0x00, 0x00, 
  0x00, 0x07, 0xc1, 0xf1, 0xe3, 0xe3, 0xe1, 0xf0, 0x77, 0xe0, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 
  0x03, 0xe1, 0xf1, 0xe3, 0xe3, 0xe1, 0xf0, 0x0f, 0x80, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x03, 
  0xe1, 0xf9, 0xf3, 0xe3, 0xe1, 0xf0, 0x1f, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x03, 0xf0, 
  0xf9, 0xf1, 0xe3, 0xe1, 0xf0, 0x3e, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x01, 0xf0, 0xf9, 
  0xf0, 0x83, 0xe1, 0xf0, 0x7c, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x01, 0xf0, 0xf9, 0xf0, 
  0x03, 0xe1, 0xf0, 0x78, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0xf8, 0x79, 0xf0, 0x03, 
  0xe1, 0xf0, 0xf8, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0xf8, 0x79, 0xf0, 0x03, 0xe1, 
  0xf1, 0xf0, 0x00, 0x1f, 0x80, 0x00, 0x7c, 0x00, 0x00, 0x00, 0xfc, 0xf9, 0xf1, 0xc3, 0xe1, 0xf1, 
  0xf0, 0x00, 0x7f, 0xe0, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x7f, 0xf9, 0xf3, 0xe3, 0xe1, 0xe1, 0xe0, 
  0x00, 0x7f, 0xe0, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x3f, 0xf9, 0xf3, 0xe3, 0xe1, 0xe3, 0xe0, 0x00, 
  0x20, 0xf0, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x3f, 0xf1, 0xf3, 0xe3, 0xe3, 0xe3, 0xc0, 0x00, 0x00, 
  0x70, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x1f, 0xe1, 0xe3, 0xe3, 0xe3, 0xe3, 0xc0, 0x00, 0x00, 0x70, 
  0x00, 0x1e, 0x00, 0x00, 0x00, 0x0f, 0xc3, 0xe7, 0xc3, 0xc3, 0xe7, 0xc0, 0x00, 0x00, 0x70, 0x00, 
  0x1f, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe7, 0xc3, 0xc3, 0xe7, 0x80, 0x00, 0x00, 0xf0, 0x00, 0x0f, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0xe7, 0xc7, 0xc3, 0xe7, 0x80, 0x00, 0x00, 0xe0, 0x00, 0x0f, 0x00, 
  0x00, 0x00, 0x00, 0x0f, 0xc7, 0xc7, 0xc3, 0xc7, 0x80, 0x00, 0x01, 0xe0, 0x00, 0x0f, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0xcf, 0x87, 0xc7, 0xc7, 0x80, 0x00, 0x03, 0xc0, 0x00, 0x0f, 0x00, 0x00, 0x00, 
  0x00, 0x3f, 0x8f, 0x8f, 0x87, 0xc7, 0x80, 0x00, 0x07, 0x80, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 
  0x7f, 0x1f, 0x8f, 0x87, 0xc7, 0x80, 0x00, 0x07, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0xfe, 
  0x1f, 0x0f, 0x87, 0xc7, 0x80, 0x00, 0x0f, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x3f, 
  0x1f, 0x07, 0x87, 0x80, 0x00, 0x0e, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x78, 0x3e, 0x1f, 
  0x0f, 0x87, 0x80, 0x00, 0x0e, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x20, 0x7e, 0x1f, 0x0f, 
  0x87, 0x80, 0x00, 0x0e, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x3e, 0x0f, 0x8f, 
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x3e, 0x1f, 0x0b, 0xc0, 
  0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x7c, 0x1f, 0x1f, 0xc0, 0x00, 
  0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x7c, 0x1f, 0x1f, 0xe0, 0x00, 0x0f, 
  0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0xfc, 0x1f, 0x1d, 0xe0, 0x00, 0x0f, 0x00, 
  0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc1, 0xf8, 0x3e, 0x3f, 0xf0, 0x00, 0x0f, 0x00, 0x00, 
  0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x3e, 0x3e, 0xf0, 0x00, 0x0e, 0x00, 0x00, 0x78, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x7e, 0x3e, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x7c, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xe0, 0x7c, 0x7c, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x78, 0x7c, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x78, 0x78, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x10, 0x10, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xfc, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xff, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x3f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 
  0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f
};
//---------------------------------------------------------------
#define wifi_failed_width 199
#define wifi_failed_height 145
const uint8_t PROGMEM wifi_failed_bits[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0x80, 
  0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 
  0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfc, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x1f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 
  0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 
  0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xf0, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x07, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xe0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xe0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xf0, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 
  0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 
  0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x03, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 
  0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xe0, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
  0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf8, 0x00, 0x00, 
  0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xf0, 
  0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xe0, 
  0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x07, 
  0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 
  0x00, 0x01, 0xff, 0xff, 0x80, 0x00, 0x00, 0x01, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0x00, 0x00, 
  0x01, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xf0, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x80, 0x00, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x1f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 
  0x00, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x00, 0x00, 0x01, 0xff, 0xf0, 0x00, 0x00, 
  0x01, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x1f, 0x80, 0x00, 0x00, 0x01, 0xff, 0xc0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 
  0x00, 0x01, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0xff, 0x80, 
  0x00, 0x00, 0x0f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x7e, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfe, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 
  0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xf8, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x0f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x3f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xe0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0x80, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 
  0xfc, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x80, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 
  0xf0, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x07, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x3f, 
  0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xc0, 0x00, 0x00, 
  0x01, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x80, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0x80, 0x1f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 
  0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x3f, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 
  0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xfe, 
  0x00, 0x3f, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0xf8, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x7f, 0xf8, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0xc0, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 
  0xff, 0xfe, 0x00, 0x7f, 0xfe, 0x0f, 0xff, 0xff, 0xff, 0xff, 0x81, 0xff, 0xf0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0xff, 0xfe, 0x07, 0xff, 
  0xff, 0xff, 0xff, 0x07, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0x00, 0xff, 0xff, 0x03, 0xff, 0xff, 0xff, 0xfc, 0x0f, 0xff, 0xf8, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfe, 0x00, 0x78, 0x01, 0xff, 0xff, 
  0x83, 0xff, 0xff, 0xff, 0xfc, 0x0f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x7f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc1, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 
  0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x03, 
  0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xe0, 
  0x7f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xc0, 0x00, 0x00, 
  0x00, 0x07, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xfe, 0x0f, 0xff, 
  0xff, 0x83, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xfc, 0x00, 
  0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xfe, 0x07, 0xff, 0xfe, 0x07, 0xff, 0xff, 0xff, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 
  0x03, 0xff, 0xfc, 0x0f, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0x83, 0xff, 0xfc, 0x0f, 0xff, 0xff, 0xff, 
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 
  0xff, 0xff, 0xc1, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x1f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xf0, 0x3f, 0xff, 
  0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x0f, 0xff, 0xff, 0xff, 0xf8, 0x3f, 0xe0, 0x7f, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xfc, 0x1f, 0xc1, 
  0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xfc, 0x0f, 0x03, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xfe, 
  0x06, 0x07, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xc0, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 
  0xff, 0xff, 0xc0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x1f, 0xff, 0xff, 0xff, 
  0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x1f, 0xff, 
  0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0x00, 
  0x0f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xfe, 0x06, 0x07, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 
  0xfe, 0x07, 0x87, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x7e, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xfc, 0x0f, 0x83, 0xff, 0xff, 0xff, 0xff, 
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x80, 0x1f, 0xff, 
  0xff, 0xff, 0xf8, 0x1f, 0xc1, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xc0, 0x0f, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xf0, 0x7f, 0xff, 
  0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xe0, 
  0x0f, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xf8, 0x3f, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xe0, 0x0f, 0xff, 0xff, 0xff, 0x81, 0xff, 0xfc, 
  0x1f, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 
  0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 0x03, 0xff, 0xfc, 0x0f, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xfe, 0x03, 
  0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x7f, 0xff, 0xf0, 0x07, 0xff, 0xff, 0xfe, 0x07, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xf0, 0x07, 0xff, 0xff, 
  0xfc, 0x0f, 0xff, 0xff, 0x83, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x7f, 0xff, 0xf0, 0x07, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xe0, 0xff, 0xff, 
  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x03, 
  0xff, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xf0, 0x7f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x01, 0xff, 0xff, 0xc1, 0xff, 0xff, 0xff, 0xf8, 
  0x1f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 
  0xfc, 0x01, 0xff, 0xff, 0x81, 0xff, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xfc, 0x01, 0xff, 0xff, 0x03, 0xff, 0xff, 
  0xff, 0xfc, 0x0f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x7f, 0xff, 0xfc, 0x00, 0xff, 0xff, 0x03, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0xff, 0xf8, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xfc, 0x00, 0xff, 0xfe, 0x07, 
  0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x3f, 0xff, 0xfc, 0x00, 0x7f, 0xfc, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xc1, 0xff, 0xf0, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xf8, 0x00, 0x7f, 
  0xf8, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf0, 0x00, 0x3f, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 
  0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xc0, 
  0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x80, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x7c, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xf8, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};




#define wifi_connected_width 200
#define wifi_connected_height 200

const unsigned char wifi_connected_bits[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 
  0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 
  0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0x80, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 
  0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 
  0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xe0, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 
  0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 
  0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xe0, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xf0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xf8, 
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 
  0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x01, 0xff, 
  0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x07, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x03, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xf0, 0x00, 0x00, 
  0x07, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xfc, 
  0x00, 0x00, 0x1f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xfe, 0x00, 0x00, 0x3f, 0xff, 0xfc, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 
  0xff, 0xff, 0x00, 0x00, 0x7f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0x80, 0x00, 0xff, 0xff, 0xe0, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xff, 0xff, 0xc0, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe0, 0x03, 0xff, 
  0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xf0, 0x07, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xf8, 
  0x0f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf8, 0x0f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 
  0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x07, 
  0xff, 0xf8, 0x0f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x0f, 0xff, 0xe0, 0x00, 0x00, 
  0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xff, 0xf8, 0x0f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf8, 0x07, 0xff, 0x80, 
  0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 
  0x00, 0x00, 0x00, 0x00, 0x7f, 0xf0, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 
  0xff, 0xf0, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x03, 
  0xfe, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 
  0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 
  0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x07, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 
  0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xfc, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 
  0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 
  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x7f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 
  0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0x80, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xfc, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
  0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf0, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xff, 0xff, 0xff, 0xc0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x7f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x3f, 
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xe0, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x80, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x7f, 0xf0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0x00, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xf8, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x07, 0xff, 
  0xcf, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x03, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x7f, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x07, 
  0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xfc, 0x00, 0x00, 
  0x00, 0x0f, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x0f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x01, 0xcf, 0xff, 0xff, 0xff, 0xff, 
  0xc0, 0x1f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0x80, 
  0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xfc, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 
  0xff, 0xff, 0x80, 0x7f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 
  0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xfc, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 
  0xff, 0x1f, 0xff, 0xfe, 0x01, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x3f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfe, 0x07, 0xff, 0xfc, 0x03, 0xff, 0xff, 
  0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x0f, 0xfe, 0x03, 0xff, 0xf8, 0x07, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfe, 0x01, 0xff, 0xf0, 0x0f, 
  0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0xff, 0xe0, 0x0f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x00, 0x7f, 
  0xc0, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x1f, 0x80, 0x3f, 0xff, 0xff, 0xf8, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 
  0xc0, 0x0f, 0x00, 0x7f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xe0, 0x06, 0x00, 0xff, 0xff, 0xff, 0xf8, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x07, 0xff, 0xf0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xfc, 0x00, 0x03, 0xff, 0xff, 
  0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xff, 0xfe, 0x00, 0x07, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0x00, 0x0f, 
  0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0x80, 0x1f, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 
  0xc0, 0x3f, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xff, 0xe0, 0x00, 0x01, 0xff, 0xff, 0xe0, 0x7f, 0xff, 0xff, 0xff, 0xc0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xfc, 0x00, 0x00, 
  0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0x80, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 
  0xe0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 
  0xff, 0xff, 0xfc, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x1f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x3f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x07, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xe0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xe0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0x00, 0x3f, 0xff, 0xe0, 0x00, 0x1f, 0xff, 0xff, 
  0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 
  0xff, 0x00, 0x3f, 0xff, 0xe0, 0x00, 0x07, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0x80, 0x7f, 0xff, 0xe0, 0x00, 0x01, 
  0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x3f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xe1, 0xff, 0xff, 0x80, 
  0x00, 0x00, 0x07, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x3f, 0xff, 0xf3, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 
  0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 
  0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x01, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 
  0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x03, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};





//header files inclusions
#include <SPI.h>
#include <Adafruit_GFX.h>
#include <WiFi.h>
#include <WiFiUdp.h>
#include <NTPClient.h>
#include <HardwareSerial.h>
#include <TFT_eSPI.h>
#include <Adafruit_Fingerprint.h>
#include <WiFiClient.h>
#include <HTTPClient.h>
#include <Keypad.h>

TFT_eSPI tft = TFT_eSPI();
const char* ssid = "Sundaymba";
const char* password = "sundaymba";

//Your Domain name with URL path or IP address with path
String serverName = "http://192.168.43.127:3333/";
String API_GetID = serverName + "api/users/get-student-id-via-reg-no?reg_no=";
String API_ActivateAccount = serverName + "api/users/activate-account";
String API_staffAttendance = serverName + "api/attendance/record-staff-attendance";
String API_studentAttendance = serverName + "api/attendance/record-student-attendance";
String API_deleteUser = serverName + "api/users/delete?user_id=";
String API_checkDeletedUser = serverName + "api/users/check_if_is_deleted?user_id=";

//pins used for Tx and Rx with fingerprint
#define Tx D1
#define Rx D2
#define LCDWIDTH 480
#define LCDHEIGHT 320
#define mySerial1 Serial2    //hardware serial2 macro
#define ROW_NUM     4 // four rows
#define COLUMN_NUM  4 // three columns

long utcOffsetInSeconds = 3600;
long timeElapsed = millis();
String daysOfWeek[] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
String RegNo, yearOfStudy, faculty, department, modeOfStudy; 
String fingerPrint, courseCode, regNumber, level;
uint8_t fingerprint_id = 0;
int xStartPosition = 0, yStartPosition = 50, xIncrement = 90, yIncrement = 30;
int xCenterPosition, yCenterPosition;
int fingerprintID;
String payload;   //location to store response from server
bool setupInfo = true;
int   Y_offset = 20;
char keypadKey = 0;   

byte pin_rows[ROW_NUM] = {13, 12, 14, 27}; // GIOP18, GIOP5, GIOP17, GIOP16 connect to the row pins
byte pin_column[COLUMN_NUM] = {26, 25, 33, 32};  // GIOP4, GIOP0, GIOP2 connect to the column pins

char keys[ROW_NUM][COLUMN_NUM] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};

Keypad keypad = Keypad( makeKeymap(keys), pin_rows, pin_column, ROW_NUM, COLUMN_NUM );

//object instanciations

WiFiUDP ntpUDP;
NTPClient espNtpClient = NTPClient(ntpUDP, "pool.ntp.org", utcOffsetInSeconds);
Adafruit_Fingerprint finger(&mySerial1); //using mySerial1 address to construct fingerprint sensor instance

void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  
  /////////////////// SETUP SCREEN /////////////////////
  tft.init();               //initialize the screen
  tft.setRotation(1);       //set rotation to landscape

  ///////////////////// CONNECT TO WIFI /////////////////
  wifiConnection();  

  ////////////////// startup the NTPClient /////////////
  espNtpClient.begin();

  /////////////////// SETUP THE FINGERPRINT ////////////
  fingerprintSetup();

  ////////////////// SETUP THE TIME ///////////////////
  Time();
}


//////////////////////////// FINGERPRINT SETUP //////////////////////
void fingerprintSetup()
{
  finger.begin(57600);   //begin the fingerprint comm. baud rate

  Serial.println("verifying fingerprint connection.....");
  //verify fingerprint sensor connection
  if(finger.verifyPassword())
  {
    Serial.println("Found fingerprint");
    tft.fillScreen(TFT_BLACK);
    tft.setCursor(30, 0);
    tft.setTextSize(3);
    tft.print("Fingerprint Connected");
    tft.drawBitmap(180, 70, FinPr_valid_bits, FinPr_valid_width, FinPr_valid_height, TFT_WHITE);
    delay(2000);
    
  }else
  {
    Serial.println("Fingerprint not found");
    tft.fillScreen(TFT_BLACK);
    tft.setCursor(20, 0);
    tft.setTextSize(3);
    tft.print("Fingerprint Not Connected");
    tft.drawBitmap(180, 100, FinPr_invalid_bits, FinPr_invalid_width, FinPr_invalid_height, TFT_WHITE);
    delay(2000);
    
    while(1); //keep waiting for the user to properly connect the sensor
  }
}

/////////////////////////// CONNECT TO WIFI /////////////////////////
void wifiConnection()
{
  WiFi.mode(WIFI_OFF);    //prevent reconnected issue, (or WiFi taking too long to connect)
  delay(1000);
  WiFi.mode(WIFI_STA);    //set the wifi as a stationery  device
  WiFi.begin(ssid, password);
  Serial.print("Connecting");

  tft.fillScreen(TFT_BLACK);
  tft.setCursor(0, 0);
  tft.setTextSize(3);
  tft.print("Connecting to....."); //store the data in flash memory
  tft.setCursor(0, 50);
  tft.print(ssid);
  tft.drawBitmap(150, 80, wifi_start_bits, wifi_start_width, wifi_start_height, TFT_WHITE);
  delay(2000);
  
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(500);
    Serial.print(".");
  }

  tft.fillScreen(TFT_BLACK);
  tft.setTextSize(3);
  tft.setCursor(20, 0);
  tft.print("WiFi Connected");
  tft.drawBitmap(150, 80, wifi_connected_bits, wifi_connected_width, wifi_connected_height, TFT_WHITE);
  delay(2000);
  
  Serial.print("\nConnected successfully to: ");
  Serial.println(WiFi.localIP());
}


void loop() {
  // put your main code here, to run repeatedly:

    while(setupInfo)  //keep showing while user has not press Okay
    {
      
      char setupCode = Configuration();  //familiarize the user with the interface
      if(setupCode == '*')
      {
        setupInfo = false;
        break;
      }
      else if(setupCode == '#')
      {
        setupInfo = false;
        return;
      }
      else if(setupCode == 'D')
      {
        if(Registration_ID("User ID: ", "Enter User ID")== "cancel")
        {
          return;
        }else
        {
           int user_id = Registration_ID("User ID: ", "Enter User ID").toInt();
           deleteUserFingerprint(user_id);
        }

        
      }
      
    }


    keypadKey = keypad.getKey();

    if(!keypadKey)                  //when no key is pressed
    {
        while(millis() - timeElapsed > 30000) //while 30secs has not passsed since the processor started running
        {
          Time();  
          timeElapsed = millis();
        }
    }
    else
    {
          keypadKey = 0;  //reset keypress
            
          char choice = Enrollment("REGISTRATION", "ATTENDANCE", "BIOMETRIC SYSTEM");  //GET STUDENT ATTENDANCE, STAFF ATTENDANCE AND REGISTRATION
     
        if(choice == '1')                                                           //Registration
        {
            char selectReg = Enrollment("STAFF", "STUDENT", "ENROLLMENT"); //select registration type
  
           //staff selected
          if(selectReg == '1')   
          {   
              uint8_t staffReg_ID;
              if(Registration_ID("REG ID: ", "REGISTRATION ID") == "cancel")
              {
                return;
              }
              else
              {
                 staffReg_ID = Registration_ID("REG ID: ", "REGISTRATION ID").toInt(); //get staff registered ID locally
              }
              
              while(staffReg_ID == 0)  //ID #0 is not allowed
              {
                  if(Registration_ID("REG ID: ", "REGISTRATION ID") == "cancel")
                  {
                    return;
                  }
                  else
                  {
                     staffReg_ID = Registration_ID("REG ID: ", "REGISTRATION ID").toInt(); //get staff registered ID locally
                  }
              }
              fingerprintID = getFingerprintEnroll(staffReg_ID);    //register the staff  
              Serial.println(fingerprintID);
              if(fingerprintID > 0)
              {
                  tft.fillScreen(TFT_BLACK);
                  tft.setCursor(0,0);
                  tft.setTextColor(TFT_GREEN);
                  tft.setTextSize(3);
                  tft.print("Successful!!");
                  tft.drawBitmap(180, 70, FinPr_valid_bits, FinPr_valid_width, FinPr_valid_height, TFT_GREEN);
                  delay(500);  

                  SendFingerprintID("STAFF", staffReg_ID, "REGISTRATION");  //send fingerprintID to the website
                  tft.fillScreen(TFT_BLACK);
                  tft.setCursor(50, 100);
                  tft.print("Welcome " + payload + "!"); 
//                  delay(500);
              }
              else
              {
                  tft.fillScreen(TFT_BLACK);
                  tft.setCursor(0,0);
                  tft.setTextColor(TFT_RED);
                  tft.setTextSize(3);
                  tft.print("Not Successful!!");
                  tft.drawBitmap(180, 100, FinPr_invalid_bits, FinPr_invalid_width, FinPr_invalid_height, TFT_RED); 
                  delay(1000); 
              }
                     
         }
         else if(selectReg == '2')    //Student part
         {
             String regNo = RegistrationNumber();
             
              if(regNo == "cancel") 
              {
                return;
              }
              
             int student_id = getStudentID(regNo);        //get student ID from the website
             Serial.println(regNo);
             Serial.println(student_id);
             fingerprintID = getFingerprintEnroll(student_id);        //enroll student 
              
              if(fingerprintID > 0)
              {
                  tft.fillScreen(TFT_BLACK);
                  tft.setCursor(0,0);
                  tft.setTextColor(TFT_GREEN);
                  tft.setTextSize(3);
                  tft.print("Successful!!");
                  tft.drawBitmap(180, 70, FinPr_valid_bits, FinPr_valid_width, FinPr_valid_height, TFT_GREEN);
                  delay(500);  

                  SendFingerprintID("STUDENT", student_id, "REGISTRATION"); //make a post request to activate the account
                  
                  tft.fillScreen(TFT_BLACK);
                  tft.setCursor(50, 100);
                  tft.print("Welcome " + payload + "!"); 
//                  delay(500);                      
              }
              else
              {
                  tft.fillScreen(TFT_BLACK);
                  tft.setCursor(0,0);
                  tft.setTextColor(TFT_RED);
                  tft.setTextSize(3);
                  tft.print("Not Successful!!");
                  tft.drawBitmap(180, 100, FinPr_invalid_bits, FinPr_invalid_width, FinPr_invalid_height, TFT_RED); 
                  delay(1000); 
              }
             
  
         }
       }
       else if(choice == '2') //Attendance
       {     
          //Enrollment displays different attendance list for both student and staff
          char selectAttendance = Enrollment("STAFF ATTENDACE", "STUDENT ATTENDANCE", "ATTENDANCE");
          if(selectAttendance == '1')
          {
            //Class Attendance
            recordStudentAttendance("Class");
            
          }else if(selectAttendance == '2')
          {
            //Examination Attendance
            recordStudentAttendance("Examination");
            
          }else if(selectAttendance == '3')
          {
            //Test Attendance
            recordStudentAttendance("Test");
            
          }else if(selectAttendance == '4')
          {
            //Staff Attendance
            recordStaffAttendance("Staff");      
          }else if(selectAttendance == '*')
          {
            return;
          }
            
        }
        else if(choice == '*')
        {
          return;
        }
     }     
}


///////////////////////////////////// Configuration /////////////////////
char Configuration()
{

    displaySetupInfo();
    keypadKey = keypad.getKey();
    
    while(!keypadKey) //keep waiting while the user has not pressed any key
    {
      keypadKey = keypad.getKey();
    }
    char keyPressed = keypadKey;
    keypadKey = 0;      //reset back to empty data.
  
    Serial.print("keyPressed: ");
    Serial.println(keyPressed);
  while (keyPressed != '*' && keyPressed != '#' && keyPressed != 'D')
  {
    WrongInput();
    //delay(1000);
    displaySetupInfo();

    keypadKey = keypad.getKey();
    while (!keypadKey)  //keep waiting while no key has been pressed
    {
      keypadKey = keypad.getKey();
    }
    keyPressed = keypadKey;
    keypadKey = 0;  //reset

  }
  return keyPressed;
}

////////////////////////////////// Display setup info /////////////////////////////
void displaySetupInfo()
{
    displayTitleMessage("User Guide");
    tft.setCursor(xStartPosition, yStartPosition);
    tft.print("Use following Keys: ");
    tft.setCursor(xStartPosition, yStartPosition + (2 * yIncrement));
    tft.print("# => Okay");
    //tft.setCursor(xStartPosition + (xIncrement), yStartPosition + (yIncrement));
    //tft.print("'#' => Okay");
    tft.setCursor(xStartPosition, yStartPosition + (10 + 3 * yIncrement));
    tft.print("* => Cancel");
    //tft.setCursor(xStartPosition + (xIncrement), yStartPosition + (2 * yIncrement));
   // tft.print("'*' => Cancel");
    tft.setCursor(xStartPosition, yStartPosition + (20 + 4 * yIncrement));
    tft.print("D => delete User");
    //tft.setCursor(xStartPosition + (xIncrement), yStartPosition + (3 * yIncrement));
    //tft.print("'D' => delete User");

}

/////////////////////////////////// Send ID and RegNo to the website //////////////////////
void SendFingerprintID(String user, uint8_t id, String status)
{
      WiFiClient client;
      HTTPClient http;

      Serial.println(id);
      // Your Domain name with URL path or IP address with path
      http.begin(client, API_ActivateAccount);

      // Specify content-type header
      http.addHeader("Content-Type", "application/x-www-form-urlencoded");

      //parameter
      // Data to send with HTTP POST   
       Serial.print("RequestData  ");
       Serial.println("id=" + String(id));
      // Send HTTP POST request
      int httpResponseCode = http.POST("id=" + String(id));
     
      Serial.print("HTTP Response code: ");
      Serial.println(httpResponseCode);

      //get responds from server as a string
      if(httpResponseCode > 0)
      {
         payload = http.getString();  //get response info. from server
         Serial.println(payload);
      }
      
        
      // Free resources
      http.end();
}

////////////////////////// Upload Student Attendance //////////////////
void uploadStudentAttendance(String regNo, uint8_t ID, String courseCode, String type, String AttendanceType)
{
      WiFiClient client;
      HTTPClient http;

      // Your Domain name with URL path or IP address with path
      http.begin(client, API_studentAttendance);
      
      // Specify content-type header
      http.addHeader("Content-Type", "application/x-www-form-urlencoded");
      
      // Data to send with HTTP POST   
              
      // Send HTTP POST request
      int httpResponseCode = http.POST("reg_no="+ regNo + "&lecturer_id=" + String(ID) + "&course_code=" + courseCode + "&type=" + type);
     
      Serial.print("HTTP Response code: ");
      Serial.println(httpResponseCode);

      //get responds from server as a string
      if(httpResponseCode > 0)
      {
        payload = http.getString();
        Serial.println(payload);
      }

      
        
      // Free resources
      http.end();
}


////////////////////////// Upload staff attendance ////////////////////////////////////
void uploadStaffAttendance(int staff_id)
{
      WiFiClient client;
      HTTPClient http;

      // Your Domain name with URL path or IP address with path
      http.begin(client, API_staffAttendance);

      // Specify content-type header
      http.addHeader("Content-Type", "application/x-www-form-urlencoded");
      
      // Data to send with HTTP POST
              
      // Send HTTP POST request
      Serial.print("staff Id: ");
      Serial.println("staff_id=" + String(staff_id));
      int httpResponseCode = http.POST("staff_id=" + String(staff_id));
     
      Serial.print("HTTP Response code: ");
      Serial.println(httpResponseCode);

      //get responds from server as a string
      if(httpResponseCode > 0)
      {
        payload = http.getString();
        Serial.println(payload);
      }

      
        
      // Free resources
      http.end();
}

/////////////////////////////// Get Student ID from the website /////////////////
int getStudentID(String regNo)
{
      HTTPClient http;
       API_GetID += regNo;
      // Your Domain name with URL path or IP address with path
      http.begin(API_GetID);
      
      // Send HTTP GET request
      int httpResponseCode = http.GET();
      payload = "0";
      
      if (httpResponseCode>0) {
        Serial.print("HTTP Response code: ");
        Serial.println(httpResponseCode);
        payload = http.getString();
        Serial.println(payload);
      }
      else {
        Serial.print("Error code: ");
        Serial.println(httpResponseCode);
      }
      // Free resources
      http.end();

      API_GetID = serverName + "api/users/get-student-id-via-reg-no?reg_no=";
      return payload.toInt();
}

///////////////////////////////// Verify Student and Staff //////////////////////////
int verifyUserFingerPrint()
{

  uint8_t p = finger.getImage();
  
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image taken");
      break;
    case FINGERPRINT_NOFINGER:
      Serial.println("No finger detected");
      return -1;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return -1;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println("Imaging error");
      return -1;
    default:
      Serial.println("Unknown error");
      return -1;
  }

  // OK success!

  p = finger.image2Tz();
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      Serial.println("Image too messy");
      return -1;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return -1;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("Could not find fingerprint features");
      return -1;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println("Could not find fingerprint features");
      return -1;
    default:
      Serial.println("Unknown error");
      return -1;
  }

  // OK converted!
  p = finger.fingerSearch();
  if (p == FINGERPRINT_OK) {
    Serial.println("Found a print match!");
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println("Communication error");
    return -1;
  } else if (p == FINGERPRINT_NOTFOUND) {
    Serial.println("Did not find a match");
    return -1;
  } else {
    Serial.println("Unknown error");
    return -1;
  }

  // found a match!
  Serial.print("Found ID #"); Serial.print(finger.fingerID);
  Serial.print(" with confidence of "); Serial.println(finger.confidence);

  return finger.fingerID;
}


//////////////////////////////////// Enroll Fingerprint ///////////////////////////
int getFingerprintEnroll(int Reg_ID) {

  int p = -2;
  Serial.print("Waiting for valid finger to enroll as ID #"); Serial.println(Reg_ID);
  placeFingerPrint("Place Your Finger");
  delay(1000);
  scanningFingerprint("Scanning Fingerprint..");
  while (p != FINGERPRINT_OK) {
    p = finger.getImage();
    switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image taken");
      break;
    case FINGERPRINT_NOFINGER:
      Serial.print(".");
      break;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      break;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println("Imaging error");
      break;
    default:
      Serial.println("Unknown error");
      break;
    }
  }

  // OK success!
  accessInfo("Image Taking");
  delay(1000);   //wait for 1sec for text to show
  
  p = finger.image2Tz(1);
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      Serial.println("Image too messy");
      return -1;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return -1;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("Could not find fingerprint features");
      return -1;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println("Could not find fingerprint features");
      return -2;
    default:
      Serial.println("Unknown error");
      return -1;
  }

//  Serial.println("Remove finger");
//  accessInfo("Remove Finger");   //display to tft screen
//  delay(500);
  p = 0;
  while (p != FINGERPRINT_NOFINGER) {
    p = finger.getImage();
  }
  Serial.print("ID "); Serial.println(Reg_ID);
  p = -1;
  Serial.println("Place same finger again");

  placeFingerPrint("Place same finger again");
  delay(1000);
  scanningFingerprint("Scanning fingerprint");
  
  while (p != FINGERPRINT_OK) {
    p = finger.getImage();
    switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image taken");
      break;
    case FINGERPRINT_NOFINGER:
      Serial.print(".");
      break;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      break;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println("Imaging error");
      break;
    default:
      Serial.println("Unknown error");
      break;
    }
  }

  // OK success!
   accessInfo("Image Taking");
   delay(1000);
   
  p = finger.image2Tz(2);  //store in template two
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      Serial.println("Image too messy");
      return -1;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return -1;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("Could not find fingerprint features");
      return -1;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println("Could not find fingerprint features");
      return -1;
    default:
      Serial.println("Unknown error");
      return -1;
  }

  // OK converted!
  Serial.print("Creating model for #");  Serial.println(Reg_ID);

  p = finger.createModel();
  if (p == FINGERPRINT_OK) {
    Serial.println("Prints matched!");
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println("Communication error");
    return -1;
  } else if (p == FINGERPRINT_ENROLLMISMATCH) {
    Serial.println("Fingerprints did not match");
    return -2;
  } else {
    Serial.println("Unknown error");
    return -1;
  }

  Serial.print("ID "); Serial.println(Reg_ID);
  p = finger.storeModel(Reg_ID);
  if (p == FINGERPRINT_OK) {
    Serial.println("Stored!");
    return Reg_ID;
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println("Communication error");
    return -1;
  } else if (p == FINGERPRINT_BADLOCATION) {
    Serial.println("Could not store in that location");
    return -1;
  } else if (p == FINGERPRINT_FLASHERR) {
    Serial.println("Error writing to flash");
    return -1;
  } else {
    Serial.println("Unknown error");
    return -1;
  }

}


//////////////////////////////// Place FigerPrint /////////////////////////////////
void placeFingerPrint(String text)
{
  tft.fillScreen(TFT_BLACK);
  tft.setTextSize(3);
  tft.setCursor(0, 10);
  tft.print(text);
  tft.drawBitmap(170, 100, FinPr_start_bits, FinPr_start_width, FinPr_start_height, TFT_WHITE);
}

///////////////////////////////// scanning fingerprint //////////////////////////
void scanningFingerprint(String text)
{
  tft.fillScreen(TFT_BLACK);
  tft.setCursor(0, 10);
  tft.setTextSize(3);
  tft.print(text);
  tft.drawBitmap(180, 70, FinPr_scan_bits, FinPr_scan_width, FinPr_scan_height, TFT_WHITE);
}

///////////////////////////////// record Student Attendance //////////////////////
void recordStudentAttendance(String type)
{
   int lecturerID;
   if(Registration_ID("ID: ", "ENTER LECTURER ID") == "cancel")
   {
      return;
   }else
   {
     lecturerID = Registration_ID("ID: ", "ENTER LECTURER ID").toInt();
   }
   
   char courseT = courseType("FACULTY", "DEPARTMENT", "CHOOSE COURSE TYPE");  //faculty course or departmental course
        
        if(courseT == '1')       //faculty
        {
          faculty = Faculty();  //get faculty
          String course_code = getCourseCode("COURSE CODE: ", "ENTER COURSE CODE");
          if(course_code == "cancel") return;
          courseCode = faculty + course_code;     //Example: faculty(ENG) code(222) ENG222
          Serial.println(courseCode);

          //Start Attendance taking
          takeAttendance(type, courseCode, lecturerID);

        }else if(courseT == '2')  //departmental course
        {
           courseCode = getCourseTitle();
           if(courseCode == "cancel") return;
           Serial.println(courseCode);
          
          //Start Attendance taking
          takeAttendance(type, courseCode, lecturerID);
        } 
}

////////////////////////////////// Record Staff Attendance ///////////////////////
void recordStaffAttendance(String type)
{
  
  //staff attendance
          bool done = false;    //not yet done
          int lecturer_ID;
          do{
               long lastTime = millis();
               
               if(Registration_ID("ID: ", "ENTER LECTURER ID") == "cancel")
               {
                  return;
               }else
               {
                 lecturer_ID = Registration_ID("ID: ", "ENTER LECTURER ID").toInt();
               }
               
              placeFingerPrint("Place Your Finger");
              delay(1000);
              scanningFingerprint("Scanning Fingerprint");
              int extracted_ID = verifyUserFingerPrint();
              Serial.print("extracted ID "); 
              Serial.println(extracted_ID);
              
              
   // if 60s has passed and id is still not correct ask the user to enter another ID 
              while(((millis() - lastTime) < 20000) && lecturer_ID != extracted_ID) 
              {
                 extracted_ID = verifyUserFingerPrint();
                 Serial.println("no match found");
                 delay(50);  //small delay so as not to call the fingerprint at full speed.
              }

              if(lecturer_ID != extracted_ID) //60s has passed and still ID is not equal
              {
                done = false;  //not yet done
                Serial.println("1m Elasped"); 
                Serial.println("try again");
                tft.fillScreen(TFT_BLACK);
                tft.setCursor(20,0);
                tft.setTextSize(3);
                tft.setTextColor(TFT_RED);
                tft.print("No Match Found!!");
                tft.drawBitmap(180, 100, FinPr_invalid_bits, FinPr_invalid_width, FinPr_invalid_height, TFT_RED);
                delay(1000);
              }
              else
              {
                uploadStaffAttendance(lecturer_ID);     //make a post request
                Serial.println("found match");
                tft.fillScreen(TFT_BLACK);
                tft.setCursor(20,0);
                tft.setTextSize(3);
                tft.setTextColor(TFT_GREEN);
                tft.print("Match Found!!");
                tft.drawBitmap(180, 70, FinPr_valid_bits, FinPr_valid_width, FinPr_valid_height, TFT_GREEN);
                delay(1000);
                //creating a dialog
                char feedback = getStudentFeedback("Yes", "No", "Done signing in?");
                if(feedback == '1') done = true;
                else done = false;
              
              }
              
            }while (done != true); //attendance is not yet done
}

/////////////////////////////////// Take attendance //////////////////////////////
void takeAttendance(String type, String courseCode, int lecturer_ID)
{
          bool done = false;  //not yet done.
          do {

              String regNo = RegistrationNumber();         //get full regNumber
              if(regNo == "cancel") 
              {
                return;
              }
              uint8_t student_ID = getStudentID(regNo);   //extract student ID from the website
              long lastTime = millis();
              placeFingerPrint("Place Your Finger");
              delay(1000);
              scanningFingerprint("Scanning Fingerprint");
              int extracted_ID = verifyUserFingerPrint();

   // if 60s has passed and id is still not correct ask the user to enter another ID 
              while(((millis() - lastTime) < 20000) && student_ID != extracted_ID) 
              {
                 extracted_ID = verifyUserFingerPrint();
                 Serial.println("no match found");
                 delay(50);  //small delay so as not to call the fingerprint at full speed.
              }

              if(student_ID != extracted_ID) //60s has passed and still ID is not equal
              {
                done = false;         //not yet done     
                tft.fillScreen(TFT_BLACK);
                tft.setCursor(20,0);
                tft.setTextSize(3);
                tft.setTextColor(TFT_RED);
                tft.print("No Match Found!!");
                tft.drawBitmap(180, 100, FinPr_invalid_bits, FinPr_invalid_width, FinPr_invalid_height, TFT_RED);
                delay(1000);    
              }
              else
              {
                  Serial.println("match found");
                  uploadStudentAttendance(regNo, lecturer_ID, courseCode, type, "Attendance");      //make a post request
                  tft.fillScreen(TFT_BLACK);
                  tft.setCursor(20,0);
                  tft.setTextSize(3);
                  tft.setTextColor(TFT_GREEN);
                  tft.print("Match Found!!");
                  tft.drawBitmap(180, 70, FinPr_valid_bits, FinPr_valid_width, FinPr_valid_height, TFT_GREEN);
                  delay(1000);
                  //creating a dialog
                  char feedback = getStudentFeedback("Yes", "No", "Done Taking Attendance?");
                  if(feedback == '1') done = true;
                  else done = false;            
              }
              
            }while (done != true); //attendance is not yet done
          
  }


/////////////////////////////////// checking for deleted user /////////////////////////////////
bool checkDeletedUser(int user_id)
{
      HTTPClient http;
      API_checkDeletedUser += (String)user_id;

      Serial.println(API_checkDeletedUser);
      
      // Your Domain name with URL path or IP address with path
      http.begin(API_checkDeletedUser);
      
      // Send HTTP GET request
      int httpResponseCode = http.GET();
      String payloadData;
      
      if (httpResponseCode>0) {
        Serial.print("HTTP Response code: ");
        Serial.println(httpResponseCode);
        payloadData = http.getString();
        Serial.println(payloadData);
      }
      else {
        Serial.print("Error code: ");
        Serial.println(httpResponseCode);
      }
      // Free resources
      http.end();

      API_checkDeletedUser = serverName + "api/users/check_if_is_deleted?user_id=";  //reset
      if(payloadData == "true") return true;
      else return false;
}

////////////////////////////////////// Delete User both online and offline ///////////////////////////////////////////////
void deleteUserFingerprint(int user_id)
{
  Serial.println(user_id);
  bool user = checkDeletedUser(user_id);  //check if user is deleted online
  
  if(user)
  {
    deleteFingerprint(user_id);   //delete the fingerprint
  }
  else
  {
    displayTitleMessage("User Delete Error");
    tft.setCursor(xStartPosition, yStartPosition + (4 * yIncrement));
    tft.setTextSize(3);
    tft.setTextColor(TFT_RED);
    tft.print("Delete Online User First");
    delay(3000);
  }
}

//////////////////////////////////////// delete fingerprint ID //////////////////////////////////
uint8_t deleteFingerprint(uint8_t id) {
  uint8_t p = -1;

  p = finger.deleteModel(id);

  if (p == FINGERPRINT_OK) {
    Serial.println("Deleted!");
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_BADLOCATION) {
    Serial.println("Could not delete in that location");
    return p;
  } else if (p == FINGERPRINT_FLASHERR) {
    Serial.println("Error writing to flash");
    return p;
  } else {
    Serial.print("Unknown error: 0x"); Serial.println(p, HEX);
    return p;
  }
}


/////////////////////////////////// extraction of School registration number /////////////////////
String year_Of_Study()
{
  displayTitleMessage("Year Of Study");
  tft.setCursor(0, Y_offset + yStartPosition);
  tft.print("1 => 2015");
  tft.setCursor(0, Y_offset + yStartPosition + yIncrement);
  tft.print("2 => 2016");
  tft.setCursor(0, yStartPosition + (2 * yIncrement + Y_offset));
  tft.print("3 => 2017");
  tft.setCursor(0, yStartPosition + (3 * yIncrement + Y_offset));
  tft.print("4 => 2018");
  tft.setCursor(0, yStartPosition + (4 * yIncrement + Y_offset));
  tft.print("5 => 2019");
  tft.setCursor(0, yStartPosition + (5 * yIncrement + Y_offset));
  tft.print("6 => 2020");

    keypadKey = keypad.getKey();
    while (!keypadKey)  //keep waiting while no key has been pressed (while no byte in the memory)
    {
      keypadKey = keypad.getKey();
    }
   char choice = keypadKey;
   keypadKey = 0;  //reset
   
  switch (choice)
  {
    case '1': return "AK15";
    case '2': return "AK16";
    case '3': return "AK17";
    case '4': return "AK18";
    case '5': return "AK19";
    case '6': return "AK20";
    case '*': return "cancel";
    default:
      {
        WrongInput();
        delay(1000);
        return "wrong input";
      }
  }
}

String Faculty()
{
  displayTitleMessage("Faculty");
  tft.setCursor(0, yStartPosition + Y_offset);
  tft.print("1 => ENGINEERING");
  tft.setCursor(0, yStartPosition + yIncrement + Y_offset);
  tft.print("2 => PHYSICAL SCIENCE");
  tft.setCursor(0, yStartPosition + (2 * yIncrement + Y_offset));
  tft.print("3 => BIOLOGICAL SCIENCE");
  tft.setCursor(0, yStartPosition + (3 * yIncrement + Y_offset));
  tft.print("4 => EDUCATION");

    keypadKey = keypad.getKey();
    while (!keypadKey)  //keep waiting while no key has been pressed (while no byte in the memory)
    {
      keypadKey = keypad.getKey();
    }
   char choice = keypadKey;
   keypadKey = 0;  //reset

  switch (choice)
  {
    case '1': return "ENG";
    case '2': return "PHY";
    case '3': return "BGS";
    case '4': return "EDU";
    case '*': return "cancel";
    default:
      {
        WrongInput();
        delay(1000);
        return "wrong input";
      }
  }
}

String mode_Of_Study()
{
  displayTitleMessage("Mode Of Study");
  tft.setCursor(0, yStartPosition + Y_offset);
  tft.print("1 => UTME");
  tft.setCursor(0, yStartPosition + (yIncrement + Y_offset));
  tft.print("2 => DIRECT ENTRY");

    keypadKey = keypad.getKey();
    while (!keypadKey)  //keep waiting while no key has been pressed (while no byte in the memory)
    {
      keypadKey = keypad.getKey();
    }
   char choice = keypadKey;
   keypadKey = 0;  //reset

  switch (choice)
  {
    case '1': return "UTME";
    case '2': return "DE";
    case '*': return "cancel";
    default:
      {
        WrongInput();
        delay(1000);
        return "wrong input";
      }
  }
}

String Registration_ID(String passcode,  String title)
{
  displayTitleMessage(title);
  tft.setCursor(xStartPosition, 100);
  tft.print(passcode);

    keypadKey = keypad.getKey();
    while (!keypadKey)  //keep waiting while no key has been pressed (while no byte in the memory)
    {
      keypadKey = keypad.getKey();
    }
   char key = keypadKey;
   keypadKey = 0;  //reset
   
  String id;
  int count = 20;

  while (key != '#')
  {
    if(key == '*')
    {
      return "cancel";
    }
    id += (String)key;
    tft.setCursor(((passcode.length() * 15) + count), 100);
    tft.print(key);

    keypadKey = keypad.getKey();
    while (!keypadKey)  //keep waiting while no key has been pressed (while no byte in the memory)
    {
      keypadKey = keypad.getKey();
    }
    key = keypadKey;
   keypadKey = 0;  //reset
   
    count += 20;
  }
  return id;
}

String ENG_Faculty()
{
  displayTitleMessage("ENGINEERING FACULTY");
  tft.setCursor(0, yStartPosition + Y_offset);
  tft.print("1 => ELECT/ELECT");
  tft.setCursor(0, yStartPosition + (yIncrement + Y_offset));
  tft.print("2 => MECHANICAL");
  tft.setCursor(0, yStartPosition + (2 * yIncrement + Y_offset));
  tft.print("3 => MARINE");
  tft.setCursor(0, yStartPosition + (3 * yIncrement + Y_offset));
  tft.print("4 => CIVIL");
  tft.setCursor(0, yStartPosition + (4 * yIncrement + Y_offset));
  tft.print("5 => AGRICULTURE");
  tft.setCursor(0, yStartPosition + (5 * yIncrement + Y_offset));
  tft.print("6 => CHEMICAL");

    keypadKey = keypad.getKey();
    while (!keypadKey)  //keep waiting while no key has been pressed (while no byte in the memory)
    {
      keypadKey = keypad.getKey();
    }
   char choice = keypadKey;
   keypadKey = 0;  //reset

  switch (choice)
  {
    case '1': return "EEE";
    case '2': return "MEC";
    case '3': return "MAE";
    case '4': return "CIV";
    case '5': return "AEE";
    case '6': return "CHE";
    case '*': return "cancel";
    default:
      {
        WrongInput();
        delay(1000);
        return "wrong input";
      }
  }
}

String PHY_Faculty()
{

  displayTitleMessage("PHYSICAL FACULTY");
  tft.setCursor(0, yStartPosition + Y_offset);
  tft.print("1 => CHMISTRY");
  tft.setCursor(0, yStartPosition + (yIncrement + Y_offset));
  tft.print("2 => PHYSICS");
  tft.setCursor(0, yStartPosition + (2 * yIncrement + Y_offset));
  tft.print("3 => COMPUTER SCIENCE");
  tft.setCursor(0, yStartPosition + (3 * yIncrement + Y_offset));
  tft.print("4 => GEOLOGY");
  tft.setCursor(0, yStartPosition + (4 * yIncrement + Y_offset));
  tft.print("5 => MATHEMATICS");
  tft.setCursor(0, yStartPosition + (5 * yIncrement + Y_offset));
  tft.print("6 => STATISTIC");
  

    keypadKey = keypad.getKey();
    while (!keypadKey)  //keep waiting while no key has been pressed (while no byte in the memory)
    {
      keypadKey = keypad.getKey();
    }
   char choice = keypadKey;
   keypadKey = 0;  //reset

  switch (choice)
  {
    case '1': return "CHM";
    case '2': return "PHY";
    case '3': return "COMP SCI";
    case '4': return "GEO";
    case '5': return "MTH";
    case '6': return "STAT";
    case '*': return "cancel";
    default:
      {
        WrongInput();
        delay(1000);
        return "wrong input";
      }
  }
}

String BIO_Faculty()
{
  displayTitleMessage("BIOLOGICAL FACULTY");
  tft.setCursor(0, yStartPosition + Y_offset);
  tft.print("1 => MICROBIOLOGY");
  tft.setCursor(0, yStartPosition + (yIncrement + Y_offset));
  tft.print("2 => BIOTECHNOLOGY");
  tft.setCursor(0, yStartPosition + (2 * yIncrement + Y_offset));
  tft.print("3 => ZOOLOGY");
  tft.setCursor(0, yStartPosition + (3 * yIncrement + Y_offset));
  tft.print("4 => BIOCHEMISTRY");
  tft.setCursor(0, yStartPosition + (4 * yIncrement + Y_offset));
  tft.print("5 => BOTANY");
  tft.setCursor(0, yStartPosition + (5 * yIncrement + Y_offset));
  tft.print("6 => MARINE BIOLOGY");

    keypadKey = keypad.getKey();
    while (!keypadKey)  //keep waiting while no key has been pressed (while no byte in the memory)
    {
      keypadKey = keypad.getKey();
    }
   char choice = keypadKey;
   keypadKey = 0;  //reset

  switch (choice)
  {
    case '1': return "MCB";
    case '2': return "BTG";
    case '3': return "ZOO";
    case '4': return "BCH";
    case '5': return "BOT";
    case '6': return "MAB";
    case '*': return "cancel";
    default:
      {
        WrongInput();
        delay(1000);
        return "wrong input";
      }
  }
}

String EDU_Faculty()
{
  displayTitleMessage("EDUCATION FACULTY");
  tft.setCursor(0, yStartPosition + Y_offset);
  tft.print("1 => EDUCATION BIOLOGY");
  tft.setCursor(0, yStartPosition + (yIncrement + Y_offset));
  tft.print("2 => BIOTECHNOLOGY");
  tft.setCursor(0, yStartPosition + (2 * yIncrement + Y_offset));
  tft.print("3 => ZOOLOGY");
  tft.setCursor(0, yStartPosition + (3 * yIncrement + Y_offset));
  tft.print("4 => BIOCHEMISTRY");
  tft.setCursor(0, yStartPosition + (4 * yIncrement + Y_offset));
  tft.print("5 => BOTANY");
  tft.setCursor(0, yStartPosition + (5 * yIncrement + Y_offset));
  tft.print("6 => MARINE BIOLOGY");

    keypadKey = keypad.getKey();
    while (!keypadKey)  //keep waiting while no key has been pressed (while no byte in the memory)
    {
      keypadKey = keypad.getKey();
    }
   char choice = keypadKey;
   keypadKey = 0;  //reset

  switch (choice)
  {
    case '1': return "EEE";
    case '2': return "MEC";
    case '3': return "MAE";
    case '4': return "CIV";
    case '5': return "AEE";
    case '6': return "CHE";
    case '*': return "cancel";
    default:
      {
        WrongInput();
        delay(1000);
        return "wrong input";
      }
  }
}

void displayTitleMessage(String text)
{
  tft.fillScreen(TFT_BLACK);
  tft.setTextSize(3);
  tft.setTextColor(TFT_WHITE);
  tft.setCursor(((LCDWIDTH / 2) - (text.length() * 8)), 10);
  tft.print(text);
}

char Enrollment(String registration, String authentication, String title)
{

  displayEnrollment(registration, authentication, title);

    keypadKey = keypad.getKey();
    while (!keypadKey)  //keep waiting while no key has been pressed (while no byte in the memory)
    {
      keypadKey = keypad.getKey();
    }
   char keyPressed = keypadKey;
   keypadKey = 0;  //reset
   
//  Serial.println(keyPressed == '1');
  while (keyPressed != '1' && keyPressed != '2' && keyPressed != '3' && keyPressed != '4' && keyPressed != '*')
  {
    WrongInput();
    //delay(1000);
    displayEnrollment(registration, authentication, title);
    
    keypadKey = keypad.getKey();
    while (!keypadKey)  //keep waiting while no key has been pressed (while no byte in the memory)
    {
      keypadKey = keypad.getKey();
    }
   char keyPressed = keypadKey;
   keypadKey = 0;  //reset
  }
  return keyPressed;
}

void displayEnrollment(String reg, String auth, String titleMessage)
{
  if (titleMessage == "ATTENDANCE")
  {
    displayTitleMessage(titleMessage);
    tft.setCursor(xStartPosition, yStartPosition + Y_offset);
    tft.print("1 => ");
    tft.setCursor(xStartPosition + (xIncrement), yStartPosition + Y_offset);
    tft.print("Class ");
    tft.setCursor(xStartPosition, yStartPosition + ( yIncrement + Y_offset + 10));
    tft.print("2 => ");
    tft.setCursor(xStartPosition + (xIncrement), yStartPosition + (yIncrement + Y_offset + 10 ));
    tft.print("Examination");
    tft.setCursor(xStartPosition, yStartPosition + (2* yIncrement + Y_offset + 20));
    tft.print("3 => ");
    tft.setCursor(xStartPosition + (xIncrement), yStartPosition + (2* yIncrement + Y_offset + 20));
    tft.print("Test ");
    tft.setCursor(xStartPosition, yStartPosition + (3 * yIncrement + Y_offset + 30));
    tft.print("4 => ");
    tft.setCursor(xStartPosition + (xIncrement), yStartPosition + (3 * yIncrement + Y_offset + 30));
    tft.print("Staff ");
  } else
  {
    displayTitleMessage(titleMessage);
    tft.setCursor(xStartPosition, 20 + yStartPosition);
    tft.print("1 => ");
    tft.setCursor(xStartPosition + (xIncrement), 20 + yStartPosition);
    tft.print(reg);
    tft.setCursor(xStartPosition, (yStartPosition + (30 + yIncrement)));
    tft.print("2 => ");
    tft.setCursor(xStartPosition + (xIncrement), (yStartPosition + (30 + yIncrement)));
    tft.print(auth);
  }

}

void WrongInput()
{
  displayTitleMessage("Wrong Input");
  String text = "Try Again..";
  tft.setCursor(((LCDWIDTH / 2) - (text.length() * 8)), 60);
  tft.print(text);
}

void accessInfo( String text)
{
  tft.fillScreen(TFT_BLACK);
  tft.setTextColor(TFT_WHITE);
  tft.setTextSize(3);
  tft.setCursor(((LCDWIDTH / 2) - (text.length() * 8)), 100);
  tft.print(text);
}

void Time()
{
  espNtpClient.update();
  String weekDay = daysOfWeek[espNtpClient.getDay()];
  String formattedDate = espNtpClient.getFormattedDate();
  int indexT = formattedDate.indexOf("T");
  String date = formattedDate.substring(0, indexT);
  String time = formattedDate.substring(indexT + 1, formattedDate.length() - 4);
  tft.fillScreen(TFT_BLACK);
  tft.setTextSize(4);
  tft.setTextColor(TFT_ORANGE);
  tft.setCursor(((LCDWIDTH / 2) - (weekDay.length() * 10)), 50);
  tft.println(weekDay);
  tft.setCursor(((LCDWIDTH / 2) - (date.length() * 10)), 100);
  tft.println(date);
  tft.setCursor(((LCDWIDTH / 2) - (time.length() * 10)), 150);
  tft.println(time);
}

char courseType(String faculty, String department, String title)
{
  return Enrollment(faculty, department, title);
}

String getCourseCode(String code, String title)
{
  return Registration_ID(code, title);
}

char getStudentFeedback(String done, String notDone, String title)
{
  return Enrollment(done, notDone, title);
}

char getCourseOption()
{
  return Enrollment("Comm/Pow", "General", "Course Option");
}

char getComPowCourse()
{
  return Enrollment("Communication", "Power", "Course Option");
}

String Elect_dept()
{
  level = getLevel();
  if (level == "100" || "200" || "300" || "400")
  {
    if(Registration_ID("Course Code:: ", "Enter Course Code") == "cancel") return "cancel";
    else return ("EEE" + Registration_ID("Course Code:: ", "Enter Course Code"));  //get course code example EEE222
  }
  else if (level == "500")
  {
    char option = getCourseOption();
    if (option == '1')
    {
      option = getComPowCourse();
      if(option == '1') 
      {
        if(Registration_ID("Course Code:: ", "Enter Course Code") == "cancel") return "cancel";
        else return ("EEC" + Registration_ID("Course Code:: ", "Course Code"));
      }
      else if(option == '2') 
      {
        if(Registration_ID("Course Code:: ", "Enter Course Code") == "cancel") return "cancel";
        else return ("EPM" + Registration_ID("Course Code:: ", "Course Code"));
      }
    }
    else if (option == '2') 
    {
      if(Registration_ID("Course Code:: ", "Enter Course Code") == "cancel") return "cancel";
      else return ("EEE" + Registration_ID("Course Code:: ", "Course Code"));
    }
  }
}

//String Mec_dept()
//{
//  level = getLevel();
//  if (level == "100")
//  {
//    displayInfo("No departmental course for 100L");
//  }
//  else if (level == "200" || "300" || "400")
//  {
//    return ("MEC" + Registration_ID("RegNo:", "Reg. Number"));
//  }
//  else if (level == "500")
//  {
//    char option = getCourseOption();
//    if (option == '1') return ("EEC" + Registration_ID("RegNo:", "Reg. Number"));
//    else if (option == '2') return ("EPM" + Registration_ID("RegNo:", "Reg. Number"));
//  }
//}
//
//String Marine_dept()
//{
//  level = getLevel();
//  if (level == "100")
//  {
//    displayInfo("No departmental course for 100L");
//  }
//  else if (level == "200" || "300" || "400")
//  {
//    return ("MEC" + Registration_ID("RegNo:", "Reg. Number"));
//  }
//  else if (level == "500")
//  {
//    char option = getCourseOption();
//    if (option == '1') return ("EEC" + Registration_ID("RegNo:", "Reg. Number"));
//    else if (option == '2') return ("EPM" + Registration_ID("RegNo:", "Reg. Number"));
//  }
//}
//
//String Agric_dept()
//{
//  level = getLevel();
//  if (level == "100")
//  {
//    displayInfo("No departmental course for 100L");
//  }
//  else if (level == "200" || "300" || "400")
//  {
//    return ("MEC" + Registration_ID("RegNo:", "Reg. Number"));
//  }
//  else if (level == "500")
//  {
//    char option = getCourseOption();
//    if (option == '1') return ("EEC" + Registration_ID("RegNo:", "Reg. Number"));
//    else if (option == '2') return ("EPM" + Registration_ID("RegNo:", "Reg. Number"));
//  }
//}
//
//String Chem_dept()
//{
//  level = getLevel();
//  if (level == "100")
//  {
//    displayInfo("No departmental course for 100L");
//  }
//  else if (level == "200" || "300" || "400")
//  {
//    return ("MEC" + Registration_ID("RegNo:", "Reg. Number"));
//  }
//  else if (level == "500")
//  {
//    char option = getCourseOption();
//    if (option == '1') return ("EEC" + Registration_ID("RegNo:", "Reg. Number"));
//    else if (option == '2') return ("EPM" + Registration_ID("RegNo:", "Reg. Number"));
//  }
//}
//
//String Civil_dept()
//{
//  level = getLevel();
//  if (level == "100")
//  {
//    displayInfo("No departmental course for 100L");
//  }
//  else if (level == "200" || "300" || "400")
//  {
//    return ("MEC" + Registration_ID("RegNo:", "Reg. Number"));
//  }
//  else if (level == "500")
//  {
//    char option = getCourseOption();
//    if (option == '1') return ("EEC" + Registration_ID("RegNo:", "Reg. Number"));
//    else if (option == '2') return ("EPM" + Registration_ID("RegNo:", "Reg. Number"));
//  }
//}

String getCourseTitle()
{
  faculty = Faculty();
  if (faculty == "ENG")
  {
    department = ENG_Faculty();

     if(department == "EEE") return Elect_dept();

//    switch (department)
//    {
//      case "EEE": return Elect_dept();
//      case "MEC": return Mec_dept();
//      case "CIV": return Civil_dept();
//      case "AEE": return Agric_dept();
//      case "CHE": return Chem_dept();
//      case "MAE": return Marine_dept();
//    }

  }
}

String RegistrationNumber()
{
        yearOfStudy = year_Of_Study();
        while (yearOfStudy == "wrong input")          //keep prompting while student keep choosing wrong year
        {
          yearOfStudy = year_Of_Study();
        }


        //checking if user makes a mistake and cancel is selected
        if(yearOfStudy == "cancel")
        {
          return yearOfStudy;
        }
        
        //faculty
        faculty = Faculty();
        while (faculty == "wrong input")
        {
          faculty = Faculty();
        }

        //checking if user makes a mistake and cancel is selected
        if(faculty == "cancel")
        {
          return faculty;
        }
        
        if (faculty == "ENG") //Engineering faculty
        {
          department = ENG_Faculty();
          while (department == "wrong input")
          {
            department = ENG_Faculty();
          }

          if(department == "cancel")
          {
            return department;
          }
          
        }

        else if (faculty == "PHY") //Physical Science Faculty
        {
          department = PHY_Faculty();
          while (department == "wrong input")
          {
            department = PHY_Faculty();
          }
          
          if(department == "cancel")
          {
            return department;
          }
        }
        else if (faculty == "BGS") //Biological Science Faculty
        {
          department = BIO_Faculty();
          while (department == "wrong input")
          {
            department = BIO_Faculty();
          }
         
          if(department == "cancel")
          {
            return department;
          }
        }
        else if (faculty == "EDU") //Education Faculty
        {
          department = EDU_Faculty();
          while (department == "wrong input")
          {
            department = EDU_Faculty();
          }

          
          if(department == "cancel")
          {
            return department;
          }
          
        }

        modeOfStudy = mode_Of_Study();
        while (modeOfStudy == "wrong input")
        {
          modeOfStudy = mode_Of_Study();
        }

        
        if(modeOfStudy == "cancel")
        {
          return modeOfStudy;
        }
        regNumber = Registration_ID("REG NO: ", "REGISTRATION NUMBER");
        if(regNumber == "cancel") return regNumber;

        if (modeOfStudy == "UTME")
        {
          RegNo = yearOfStudy + "/" + faculty + "/" + department + "/" + regNumber;
        }
        else
        {
          RegNo = yearOfStudy + "/" + faculty + "/" + department + "/" + modeOfStudy + "/" + regNumber;
        }

        Serial.println(RegNo);
        return RegNo;
}

String getLevel()
{
  
  displayTitleMessage("LEVEL");
  tft.setCursor(0, yStartPosition);
  tft.print("1 => 100");
  tft.setCursor(0, yStartPosition + yIncrement);
  tft.print("2 => 200");
  tft.setCursor(0, yStartPosition + (2 * yIncrement));
  tft.print("3 => 300");
  tft.setCursor(0, yStartPosition + (3 * yIncrement));
  tft.print("4 => 400");
  tft.setCursor(0, yStartPosition + (4 * yIncrement));
  tft.print("5 => 500");
  tft.setCursor(0, yStartPosition + (5 * yIncrement));
  tft.print("6 => 600");

    keypadKey = keypad.getKey();
    while (!keypadKey)  //keep waiting while no key has been pressed (while no byte in the memory)
    {
      keypadKey = keypad.getKey();
    }
   char choice = keypadKey;
   keypadKey = 0;  //reset
   
  switch (choice)
  {
    case '1': return "100";
    case '2': return "200";
    case '3': return "300";
    case '4': return "400";
    case '5': return "500";
    case '6': return "600";
    default:
      {
        WrongInput();
        delay(1000);
        return "wrong input";
      }
  }
}

